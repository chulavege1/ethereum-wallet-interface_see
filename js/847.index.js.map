{"version":3,"file":"./js/847.index.js","mappings":"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","sources":["webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/_assert.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/_u64.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/utils.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/_version.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/address.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/anonymous.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/array.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/boolean.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/bytes.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/null.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/number.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/string.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/tuple.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/abi-coder.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/fragments.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/interface.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/typed.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/address/address.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/address/checks.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/contract/contract.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/contract/wrappers.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/sha3.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/keccak.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/abi/bytes32.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/rlp-encode.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/address/contract-address.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/constants/addresses.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/constants/numbers.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/constants/hashes.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/constants/strings.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/contract/factory.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/hmac.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/pbkdf2.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/_sha2.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/sha256.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/sha512.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/crypto-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/hmac.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/ripemd160.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/ripemd160.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/pbkdf2.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/random.js","webpack://ethereum-wallet-interface/./node_modules/@noble/hashes/esm/scrypt.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/scrypt.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/sha2.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/index.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/signature.js","webpack://ethereum-wallet-interface/./node_modules/@noble/secp256k1/lib/esm/index.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/crypto/signing-key.js","webpack://ethereum-wallet-interface/./node_modules/@adraffy/ens-normalize/dist/index.mjs","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/hash/namehash.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/transaction/address.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/hash/message.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/hash/solidity.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/hash/typed-data.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/base64-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/fetch.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/geturl-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/community.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/plugins-network.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/network.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/rlp-decode.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/transaction/transaction.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/base58.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/ens-resolver.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/format.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/subscriber-polling.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/abstract-provider.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/abstract-signer.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/subscriber-filterid.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-ankr.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-alchemy.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-cloudflare.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-etherscan.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/ws-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-socket.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-websocket.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-infura.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-quicknode.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-fallback.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/default-provider.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/signer-noncemanager.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-pocket.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/fixednumber.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/units.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/uuid.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/decode-owl.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/wordlist.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/lang-en.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/mnemonic.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/base-wallet.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/aes.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/mode.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/mode-cbc.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/mode-cfb.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/mode-ctr.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/utils.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/mode-ofb.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/json-keystore.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/hdwallet.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/json-crowdsale.js","webpack://ethereum-wallet-interface/./node_modules/ethers/node_modules/aes-js/lib.esm/padding.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wallet/wallet.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/wordlist-owla.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/decode-owla.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/bit-reader.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/wordlists/wordlists-browser.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/hash/id.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/providers/provider.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/transaction/accesslist.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/data.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/errors.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/events.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/maths.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/properties.js","webpack://ethereum-wallet-interface/./node_modules/ethers/lib.esm/utils/utf8.js"],"sourcesContent":["export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n/**\n *  The current version of Ethers.\n */\nexport const version = \"6.6.4\";\n//# sourceMappingURL=_version.js.map","import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = Typed.dereference(_value, \"string\");\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(toBeHex(reader.readValue(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","import { Coder } from \"./abstract-coder.js\";\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */\nexport class AnonymousCoder extends Coder {\n    coder;\n    constructor(coder) {\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","import { defineProperties, isError, assert, assertArgument, assertArgumentCount } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, Result, WordSize, Writer } from \"./abstract-coder.js\";\nimport { AnonymousCoder } from \"./anonymous.js\";\n/**\n *  @_ignore\n */\nexport function pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            assert(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            assert(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new Writer();\n    let dynamicWriter = new Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n/**\n *  @_ignore\n */\nexport function unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return Result.fromItems(values, keys);\n}\n/**\n *  @_ignore\n */\nexport class ArrayCoder extends Coder {\n    coder;\n    length;\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        defineProperties(this, { coder, length });\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        assertArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            assert(count * WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n}\n//# sourceMappingURL=array.js.map","import { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return !!reader.readValue();\n    }\n}\n//# sourceMappingURL=boolean.js.map","import { getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = getBytesCopy(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n}\n/**\n *  @_ignore\n */\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return hexlify(super.decode(reader));\n    }\n}\n//# sourceMappingURL=bytes.js.map","import { defineProperties, getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class FixedBytesCoder extends Coder {\n    size;\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        defineProperties(this, { size }, { size: \"number\" });\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, _value) {\n        let data = getBytesCopy(Typed.dereference(_value, this.type));\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return hexlify(reader.readBytes(this.size));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","import { Coder } from \"./abstract-coder.js\";\nconst Empty = new Uint8Array([]);\n/**\n *  @_ignore\n */\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes(Empty);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return null;\n    }\n}\n//# sourceMappingURL=null.js.map","import { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    size;\n    signed;\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        defineProperties(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        }\n        else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = mask(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=number.js.map","import { toUtf8Bytes, toUtf8String } from \"../../utils/utf8.js\";\nimport { Typed } from \"../typed.js\";\nimport { DynamicBytesCoder } from \"./bytes.js\";\n/**\n *  @_ignore\n */\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, _value) {\n        return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, \"string\")));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","import { defineProperties } from \"../../utils/properties.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\nimport { pack, unpack } from \"./array.js\";\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n    coders;\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        defineProperties(this, { coders: Object.freeze(coders.slice()) });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"tuple\");\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return unpack(reader, this.coders);\n    }\n}\n//# sourceMappingURL=tuple.js.map","/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = getBytes(data);\n        data = hexlify(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        }\n        else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [reason]\n                };\n                message += `: ${JSON.stringify(reason)}`;\n            }\n            catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [code]\n                };\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n                message += `: ${reason}`;\n            }\n            catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        }\n        else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: (tx.to ? getAddress(tx.to) : null),\n        data: (tx.data || \"0x\")\n    };\n    if (tx.from) {\n        transaction.from = getAddress(tx.from);\n    }\n    return makeError(message, \"CALL_EXCEPTION\", {\n        action, data, reason, transaction, invocation, revert\n    });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport class AbiCoder {\n    #getCoder(param) {\n        if (param.isArray()) {\n            return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n        if (param.isTuple()) {\n            return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\n        }\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder(size, param.name);\n        }\n        assertArgument(false, \"invalid type\", \"type\", param.type);\n    }\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    getDefaultValue(types) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n    encode(types, values) {\n        assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = new Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n    decode(types, data, loose) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(new Reader(data, loose));\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n    static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n    static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\n//# sourceMappingURL=abi-coder.js.map","import { defineProperties, concat, getBytesCopy, getNumber, hexlify, toBeArray, toBigInt, toNumber, assert, assertArgument } from \"../../utils/index.js\";\n/**\n * @_ignore:\n */\nexport const WordSize = 32;\nconst Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\"then\"];\nconst _guard = {};\nfunction throwError(name, error) {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n    wrapped.error = error;\n    throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array {\n    #names;\n    /**\n     *  @private\n     */\n    constructor(...args) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items = args[1];\n        let names = (args[2] || []).slice();\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [];\n            wrap = false;\n        }\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof (name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, (new Map()));\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n        if (!wrap) {\n            return;\n        }\n        // A wrapped Result is immutable\n        Object.freeze(this);\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof (prop) === \"string\") {\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${index}`, item);\n                        }\n                        return item;\n                    }\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function (...args) {\n                            return value.apply((this === receiver) ? target : this, args);\n                        };\n                    }\n                    else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target : this, [prop]);\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    /**\n     *  Returns the Result as a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray() {\n        const result = [];\n        this.forEach((item, index) => {\n            if (item instanceof Error) {\n                throwError(`index ${index}`, item);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject() {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                accum[name] = this.getValue(name);\n            }\n            return accum;\n        }, {});\n    }\n    /**\n     *  @_ignore\n     */\n    slice(start, end) {\n        if (start == null) {\n            start = 0;\n        }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.length;\n        }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n                end = 0;\n            }\n        }\n        if (end > this.length) {\n            end = this.length;\n        }\n        const result = [], names = [];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    filter(callback, thisArg) {\n        const result = [], names = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    map(callback, thisArg) {\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n        }\n        return result;\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name) {\n        const index = this.#names.indexOf(name);\n        if (index === -1) {\n            return undefined;\n        }\n        const value = this[index];\n        if (value instanceof Error) {\n            throwError(`property ${JSON.stringify(name)}`, value.error);\n        }\n        return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items, keys) {\n        return new Result(_guard, items, keys);\n    }\n}\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nfunction getValue(value) {\n    let bytes = toBeArray(value);\n    assert(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));\n    }\n    return bytes;\n}\n/**\n *  @_ignore\n */\nexport class Coder {\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    name;\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    type;\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    localName;\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    dynamic;\n    constructor(name, type, localName, dynamic) {\n        defineProperties(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n    _throwError(message, value) {\n        assertArgument(false, message, this.localName, value);\n    }\n}\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data;\n    #dataLength;\n    constructor() {\n        this.#data = [];\n        this.#dataLength = 0;\n    }\n    get data() {\n        return concat(this.#data);\n    }\n    get length() { return this.#dataLength; }\n    #writeData(data) {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value) {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));\n        }\n        return this.#writeData(bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value) {\n        return this.#writeData(getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue() {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    allowLoose;\n    #data;\n    #offset;\n    constructor(data, allowLoose) {\n        defineProperties(this, { allowLoose: !!allowLoose });\n        this.#data = getBytesCopy(data);\n        this.#offset = 0;\n    }\n    get data() { return hexlify(this.#data); }\n    get dataLength() { return this.#data.length; }\n    get consumed() { return this.#offset; }\n    get bytes() { return new Uint8Array(this.#data); }\n    #peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            }\n            else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength);\n    }\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset) {\n        return new Reader(this.#data.slice(this.#offset + offset), this.allowLoose);\n    }\n    // Read bytes\n    readBytes(length, loose) {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    // Read a numeric values\n    readValue() {\n        return toBigInt(this.readBytes(WordSize));\n    }\n    readIndex() {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\", \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n    #offset;\n    #tokens;\n    get offset() { return this.#offset; }\n    get length() { return this.#tokens.length - this.#offset; }\n    constructor(tokens) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n    clone() { return new TokenString(this.#tokens); }\n    reset() { this.#offset = 0; }\n    #subTokenString(from = 0, to = 0) {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({}, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            throw new Error(`expected ${type}; got ${JSON.stringify(this.peek())}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return (top.type === type) ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(\" \")}>`;\n    }\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while (offset < text.length) {\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            }\n            else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                (tokens[token.match]).match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n            }\n            else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            }\n            else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            }\n            else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    (tokens[tokens.length - 1]).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (tokens[tokens.length - 1]).text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens: ${tokens.toString()}`);\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    }\n    else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    name;\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    type;\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    baseType;\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    indexed;\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    components;\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayLength;\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayChildren;\n    /**\n     *  @private\n     */\n    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (components != null) {\n            throw new Error(\"\");\n        }\n        defineProperties(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n        }\n        else {\n            if (this.isTuple()) {\n                if (format !== \"sighash\") {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray() {\n        return (this.baseType === \"array\");\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple() {\n        return (this.baseType === \"tuple\");\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable() {\n        return (this.indexed != null);\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n        return process(this.type, value);\n    }\n    #walkAsync(promises, value, process, setValue) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        if (this.isTuple()) {\n            const components = this.components;\n            // Convert the object into an array\n            let result;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            }\n            else {\n                if (value == null || typeof (value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n                result = components.map((param) => {\n                    if (!param.name) {\n                        throw new Error(\"cannot use object value with unnamed components\");\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function () { setValue(await result); })());\n        }\n        else {\n            setValue(result);\n        }\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value, process) {\n        const promises = [];\n        const result = [value];\n        this.#walkAsync(promises, value, process, (value) => {\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ParamType.from(lex(obj), allowIndexed);\n        }\n        else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\n            }\n            else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = (obj.peekType(\"ID\") ? obj.pop().text : \"\");\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        assertArgument(!name || (typeof (name) === \"string\" && name.match(regexId)), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value) {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    type;\n    /**\n     *  The inputs for the fragment.\n     */\n    inputs;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { type, inputs });\n    }\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            }\n            catch (e) { }\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n        }\n        else if (typeof (obj) === \"object\") {\n            // JSON ABI\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n            assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    name;\n    /**\n     *  @private\n     */\n    constructor(guard, type, name, inputs) {\n        super(guard, type, inputs);\n        assertArgument(typeof (name) === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { name });\n    }\n}\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n    /**\n     *  The Custom Error selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    anonymous;\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs, anonymous) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties(this, { anonymous });\n    }\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash() {\n        return id(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return EventFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    payable;\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs, payable, gas) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties(this, { payable, gas });\n    }\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format) {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\" : \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [`constructor${joinParams(format, this.inputs)}`];\n        result.push((this.payable) ? \"payable\" : \"nonpayable\");\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ConstructorFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\"constructor\"]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, setify([\"payable\"])).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    constructor(guard, inputs, payable) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties(this, { payable });\n    }\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format) {\n        const type = ((this.inputs.length === 0) ? \"receive\" : \"fallback\");\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\" : \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return FallbackFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\"payable\"]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            else {\n                inputs = [ParamType.from(\"bytes\")];\n            }\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [ParamType.from(\"bytes\")];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    constant;\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    outputs;\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    stateMutability;\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, name, stateMutability, inputs, outputs, gas) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties(this, { constant, gas, outputs, payable, stateMutability });\n    }\n    /**\n     *  The Function selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return FunctionFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof (obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            }\n            else if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            return StructFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n//# sourceMappingURL=fragments.js.map","/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\nimport { keccak256 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, getBytesCopy, hexlify, zeroPadValue, isHexString, defineProperties, assertArgument, toBeHex, assert } from \"../utils/index.js\";\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, Fragment, FunctionFragment, ParamType } from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\nexport { checkResultErrors, Result };\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n    /**\n     *  The matching fragment for the ``topic0``.\n     */\n    fragment;\n    /**\n     *  The name of the Event.\n     */\n    name;\n    /**\n     *  The full Event signature.\n     */\n    signature;\n    /**\n     *  The topic hash for the Event.\n     */\n    topic;\n    /**\n     *  The arguments passed into the Event with ``emit``.\n     */\n    args;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, topic, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, signature, topic, args\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n    /**\n     *  The matching fragment from the transaction ``data``.\n     */\n    fragment;\n    /**\n     *  The name of the Function from the transaction ``data``.\n     */\n    name;\n    /**\n     *  The arguments passed to the Function from the transaction ``data``.\n     */\n    args;\n    /**\n     *  The full Function signature from the transaction ``data``.\n     */\n    signature;\n    /**\n     *  The selector for the Function from the transaction ``data``.\n     */\n    selector;\n    /**\n     *  The ``value`` (in wei) from the transaction.\n     */\n    value;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args, value) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector, value\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n    /**\n     *  The matching fragment.\n     */\n    fragment;\n    /**\n     *  The name of the Error.\n     */\n    name;\n    /**\n     *  The arguments passed to the Error with ``revert``.\n     */\n    args;\n    /**\n     *  The full Error signature.\n     */\n    signature;\n    /**\n     *  The selector for the Error.\n     */\n    selector;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector\n        });\n    }\n}\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n    /**\n     *  The ``keccak256`` of the value logged.\n     */\n    hash;\n    /**\n     *  @_ignore:\n     */\n    _isIndexed;\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n    /**\n     *  @_ignore:\n     */\n    constructor(hash) {\n        defineProperties(this, { hash, _isIndexed: true });\n    }\n}\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\",\n};\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\"string\"],\n        reason: (message) => {\n            return `reverted with reason string ${JSON.stringify(message)}`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\"uint256\"],\n        reason: (code) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n        }\n    }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    fragments;\n    /**\n     *  The Contract constructor.\n     */\n    deploy;\n    /**\n     *  The Fallback method, if any.\n     */\n    fallback;\n    /**\n     *  If receiving ether is supported.\n     */\n    receive;\n    #errors;\n    #events;\n    #functions;\n    //    #structs: Map<string, StructFragment>;\n    #abiCoder;\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n        //        this.#structs = new Map();\n        const frags = [];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            }\n            catch (error) {\n                console.log(\"EE\", error);\n            }\n        }\n        defineProperties(this, {\n            fragments: Object.freeze(frags)\n        });\n        let fallback = null;\n        let receive = false;\n        this.#abiCoder = this.getAbiCoder();\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties(this, { deploy: fragment });\n                    return;\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    }\n                    else {\n                        assertArgument(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n                        fallback = fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n                default:\n                    return;\n            }\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n            bucket.set(signature, fragment);\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties(this, {\n                deploy: ConstructorFragment.from(\"constructor()\")\n            });\n        }\n        defineProperties(this, { fallback, receive });\n    }\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal) {\n        const format = (minimal ? \"minimal\" : \"full\");\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson() {\n        const abi = this.fragments.map((f) => f.format(\"json\"));\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder() {\n        return AbiCoder.defaultAbiCoder();\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key, values, forceUnique) {\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#functions) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                const lastValue = (values.length > 0) ? values[values.length - 1] : null;\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") {\n                                continue;\n                            }\n                            matching.splice(i, 1);\n                            break;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key) {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */\n    hasFunction(key) {\n        return !!this.#getFunction(key, null, false);\n    }\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key, values) {\n        return this.#getFunction(key, values || null, true);\n    }\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback) {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#functions.get(name)), i);\n        }\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key, values, forceUnique) {\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#events) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key) {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, \"no matching event\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */\n    hasEvent(key) {\n        return !!this.#getEvent(key, null, false);\n    }\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key, values) {\n        return this.#getEvent(key, values || null, true);\n    }\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback) {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#events.get(name)), i);\n        }\n    }\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key, values) {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#errors) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (matching.length === 0) {\n                if (key === \"Error\") {\n                    return ErrorFragment.from(\"error Error(string)\");\n                }\n                if (key === \"Panic\") {\n                    return ErrorFragment.from(\"error Panic(uint256)\");\n                }\n                return null;\n            }\n            else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format();\n        if (key === \"Error(string)\") {\n            return ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic(uint256)\") {\n            return ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        const result = this.#errors.get(key);\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback) {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#errors.get(name)), i);\n        }\n    }\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\n    if (typeof(fragment) === \"string\") {\n        const matches: Array<Fragment> = [ ];\n\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n        if (matches.length === 0) {\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n        } else if (matches.length > 1) {\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n        }\n\n        fragment = matches[0];\n    }\n\n    return dataSlice(id(fragment.format()), 0, 4);\n}\n    */\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n    _decodeParams(params, data) {\n        return this.#abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this.#abiCoder.encode(params, values);\n    }\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        let message = \"invalid length for result data\";\n        const bytes = getBytesCopy(data);\n        if ((bytes.length % 32) === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            }\n            catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n        // Call returned data with no error, but the data is junk\n        assert(false, message, \"BAD_DATA\", {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() }\n        });\n    }\n    makeError(_data, tx) {\n        const data = getBytes(_data, \"data\");\n        const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name, signature: ef.format(), args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${error.reason}`;\n                }\n                catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`;\n                }\n            }\n        }\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n        return error;\n    }\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));\n    }\n    /*\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n            const promises: Array<Promise<>> = [ ];\n            const process = function(type: ParamType, value: any): any {\n                if (type.baseType === \"array\") {\n                    return descend(type.child\n                }\n                if (type. === \"address\") {\n                }\n            };\n    \n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                \n            };\n    \n            const result: Array<any> = [ ];\n            values.forEach((value, index) => {\n                if (value == null) {\n                    topics.push(null);\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                } else if (Array.isArray(value)) {\n                    topics.push(value.map((value) => encodeTopic(param, value)));\n                } else {\n                    topics.push(encodeTopic(param, value));\n                }\n            });\n        }\n    */\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length });\n        const topics = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = toBeHex(value);\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this.#abiCoder.encode([\"address\"], [value]);\n            }\n            return zeroPadValue(hexlify(value), 32);\n            //@TOOD should probably be return toHex(value, 32)\n        };\n        values.forEach((value, index) => {\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n                assertArgument(value == null, \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                assertArgument(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        assertArgument(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this.#abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this.#abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment, data, topics) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n        const indexed = [];\n        const nonIndexed = [];\n        const dynamic = [];\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.from({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)) : null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values = [];\n        const keys = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                }\n                else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                }\n                else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        value = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    value = error;\n                }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n        });\n        return Result.fromItems(values, keys);\n    }\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx) {\n        const data = getBytes(tx.data, \"tx.data\");\n        const value = getBigInt((tx.value != null) ? tx.value : 0, \"tx.value\");\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n    parseCallResult(data) {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log) {\n        const fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseError(data) {\n        const hexData = hexlify(data);\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value) {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n        // JSON\n        if (typeof (value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof (value.format) === \"function\") {\n            return new Interface(value.format(\"json\"));\n        }\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n//# sourceMappingURL=interface.js.map","/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, { signed, width });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${(size) ? size : \"\"}`, value, { size });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    type;\n    /**\n     *  The actual value.\n     */\n    value;\n    #options;\n    /**\n     *  @_ignore:\n     */\n    _typedSymbol;\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd, type, value, options) {\n        if (options == null) {\n            options = null;\n        }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties(this, { _typedSymbol, type, value });\n        this.#options = options;\n        // Check the value is valid\n        this.format();\n    }\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt() {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString() {\n        return (this.type === \"string\");\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return this.#options;\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if (this.#options === true) {\n            return -1;\n        }\n        if (this.#options === false) {\n            return (this.value).length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v) { return n(v, 8); }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v) { return n(v, 16); }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v) { return n(v, 24); }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v) { return n(v, 32); }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v) { return n(v, 40); }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v) { return n(v, 48); }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v) { return n(v, 56); }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v) { return n(v, 64); }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v) { return n(v, 72); }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v) { return n(v, 80); }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v) { return n(v, 88); }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v) { return n(v, 96); }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v) { return n(v, 104); }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v) { return n(v, 112); }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v) { return n(v, 120); }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v) { return n(v, 128); }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v) { return n(v, 136); }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v) { return n(v, 144); }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v) { return n(v, 152); }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v) { return n(v, 160); }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v) { return n(v, 168); }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v) { return n(v, 176); }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v) { return n(v, 184); }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v) { return n(v, 192); }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v) { return n(v, 200); }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v) { return n(v, 208); }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v) { return n(v, 216); }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v) { return n(v, 224); }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v) { return n(v, 232); }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v) { return n(v, 240); }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v) { return n(v, 248); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v) { return n(v, 256); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v) { return n(v, 256); }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v) { return n(v, -8); }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v) { return n(v, -16); }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v) { return n(v, -24); }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v) { return n(v, -32); }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v) { return n(v, -40); }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v) { return n(v, -48); }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v) { return n(v, -56); }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v) { return n(v, -64); }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v) { return n(v, -72); }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v) { return n(v, -80); }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v) { return n(v, -88); }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v) { return n(v, -96); }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v) { return n(v, -104); }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v) { return n(v, -112); }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v) { return n(v, -120); }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v) { return n(v, -128); }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v) { return n(v, -136); }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v) { return n(v, -144); }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v) { return n(v, -152); }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v) { return n(v, -160); }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v) { return n(v, -168); }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v) { return n(v, -176); }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v) { return n(v, -184); }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v) { return n(v, -192); }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v) { return n(v, -200); }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v) { return n(v, -208); }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v) { return n(v, -216); }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v) { return n(v, -224); }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v) { return n(v, -232); }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v) { return n(v, -240); }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v) { return n(v, -248); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v) { return n(v, -256); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v) { return n(v, -256); }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v) { return b(v, 1); }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v) { return b(v, 2); }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v) { return b(v, 3); }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v) { return b(v, 4); }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v) { return b(v, 5); }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v) { return b(v, 6); }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v) { return b(v, 7); }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v) { return b(v, 8); }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v) { return b(v, 9); }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v) { return b(v, 10); }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v) { return b(v, 11); }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v) { return b(v, 12); }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v) { return b(v, 13); }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v) { return b(v, 14); }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v) { return b(v, 15); }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v) { return b(v, 16); }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v) { return b(v, 17); }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v) { return b(v, 18); }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v) { return b(v, 19); }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v) { return b(v, 20); }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v) { return b(v, 21); }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v) { return b(v, 22); }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v) { return b(v, 23); }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v) { return b(v, 24); }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v) { return b(v, 25); }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v) { return b(v, 26); }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v) { return b(v, 27); }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v) { return b(v, 28); }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v) { return b(v, 29); }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v) { return b(v, 30); }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v) { return b(v, 31); }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v) { return b(v, 32); }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v) { return new Typed(_gaurd, \"address\", v); }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v) { return new Typed(_gaurd, \"bool\", !!v); }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v) { return new Typed(_gaurd, \"bytes\", v); }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v) { return new Typed(_gaurd, \"string\", v); }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value) {\n        return (value\n            && typeof (value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=typed.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = getBytes(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = (function () {\n    ;\n    const result = {};\n    for (let i = 0; i < 36; i++) {\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n})();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */\nexport function getAddress(address) {\n    assertArgument(typeof (address) === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    assertArgument(false, \"invalid address\", \"address\", address);\n}\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */\nexport function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n//# sourceMappingURL=address.js.map","import { assert, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */\nexport function isAddressable(value) {\n    return (value && typeof (value.getAddress) === \"function\");\n}\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */\nexport function isAddress(value) {\n    try {\n        getAddress(value);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nasync function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        assert(typeof (target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\n        assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return getAddress(result);\n}\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */\nexport function resolveAddress(target, resolver) {\n    if (typeof (target) === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\n            return getAddress(target);\n        }\n        assert(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\n        return checkAddress(target, resolver.resolveName(target));\n    }\n    else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n    }\n    else if (target && typeof (target.then) === \"function\") {\n        return checkAddress(target, target);\n    }\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\n}\n//# sourceMappingURL=checks.js.map","import { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log } from \"../providers/provider.js\";\nimport { defineProperties, getBigInt, isCallException, isHexString, resolveProperties, makeError, assert, assertArgument } from \"../utils/index.js\";\nimport { ContractEventPayload, ContractUnknownEventPayload, ContractTransactionResponse, EventLog } from \"./wrappers.js\";\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n    return (value && typeof (value.call) === \"function\");\n}\nfunction canEstimate(value) {\n    return (value && typeof (value.estimateGas) === \"function\");\n}\nfunction canResolve(value) {\n    return (value && typeof (value.resolveName) === \"function\");\n}\nfunction canSend(value) {\n    return (value && typeof (value.sendTransaction) === \"function\");\n}\nclass PreparedTopicFilter {\n    #filter;\n    fragment;\n    constructor(contract, fragment, args) {\n        defineProperties(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner : null;\n        this.#filter = (async function () {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) {\n                    return null;\n                }\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n    getTopicFilter() {\n        return this.#filter;\n    }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value[feature]) === \"function\") {\n        return value;\n    }\n    if (value.provider && typeof (value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\nfunction getProvider(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nexport async function copyOverrides(arg, allowed) {\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(Typed.dereference(arg, \"overrides\"));\n    assertArgument(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = await resolveAddress(overrides.from);\n    }\n    return overrides;\n}\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner, inputs, args) {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") {\n                return resolveAddress(value, resolver);\n            }\n            return value;\n        });\n    }));\n}\nfunction buildWrappedFallback(contract) {\n    const populateTransaction = async function (overrides) {\n        // If an overrides was passed in, copy it and normalize the values\n        const tx = (await copyOverrides(overrides, [\"data\"]));\n        tx.to = await contract.getAddress();\n        const iface = contract.interface;\n        const noValue = (getBigInt((tx.value || BN_0), \"overrides.value\") === BN_0);\n        const noData = ((tx.data || \"0x\") === \"0x\");\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n        assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        return tx;\n    };\n    const staticCall = async function (overrides) {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n        const tx = await populateTransaction(overrides);\n        try {\n            return await runner.call(tx);\n        }\n        catch (error) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    };\n    const send = async function (overrides) {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function (overrides) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n        return await runner.estimateGas(await populateTransaction(overrides));\n    };\n    const method = async (overrides) => {\n        return await send(overrides);\n    };\n    defineProperties(method, {\n        _contract: contract,\n        estimateGas,\n        populateTransaction,\n        send, staticCall\n    });\n    return method;\n}\nfunction buildWrappedMethod(contract, key) {\n    const getFragment = function (...args) {\n        const fragment = contract.interface.getFunction(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    };\n    const populateTransaction = async function (...args) {\n        const fragment = getFragment(...args);\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides = {};\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n        return Object.assign({}, overrides, await resolveProperties({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    };\n    const staticCall = async function (...args) {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) {\n            return result[0];\n        }\n        return result;\n    };\n    const send = async function (...args) {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function (...args) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n        return await runner.estimateGas(await populateTransaction(...args));\n    };\n    const staticCallResult = async function (...args) {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n        const tx = await populateTransaction(...args);\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        }\n        catch (error) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n    const method = async (...args) => {\n        const fragment = getFragment(...args);\n        if (fragment.constant) {\n            return await staticCall(...args);\n        }\n        return await send(...args);\n    };\n    defineProperties(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract, _key: key,\n        getFragment,\n        estimateGas,\n        populateTransaction,\n        send, staticCall, staticCallResult,\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getFunction(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\"\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\nfunction buildWrappedEvent(contract, key) {\n    const getFragment = function (...args) {\n        const fragment = contract.interface.getEvent(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    };\n    const method = function (...args) {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n    defineProperties(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract, _key: key,\n        getFragment\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getEvent(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\"\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n    internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n    return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n    return (value && typeof (value) === \"object\" && (\"getTopicFilter\" in value) &&\n        (typeof (value.getTopicFilter) === \"function\") && value.fragment);\n}\nasync function getSubInfo(contract, event) {\n    let topics;\n    let fragment = null;\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n    if (Array.isArray(event)) {\n        const topicHashify = function (name) {\n            if (isHexString(name, 32)) {\n                return name;\n            }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        };\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) {\n                return null;\n            }\n            if (Array.isArray(e)) {\n                return e.map(topicHashify);\n            }\n            return topicHashify(e);\n        });\n    }\n    else if (event === \"*\") {\n        topics = [null];\n    }\n    else if (typeof (event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [event];\n        }\n        else {\n            // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [fragment.topicHash];\n        }\n    }\n    else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n    }\n    else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [fragment.topicHash];\n    }\n    else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) {\n            return null;\n        }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) {\n                return items[0];\n            }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n    const tag = topics.map((t) => {\n        if (t == null) {\n            return \"null\";\n        }\n        if (Array.isArray(t)) {\n            return t.join(\"|\");\n        }\n        return t;\n    }).join(\"&\");\n    return { fragment, tag, topics };\n}\nasync function hasSub(contract, event) {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", { operation });\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n    const { addr, subs } = getInternal(contract);\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address = (addr ? addr : contract);\n        const filter = { address, topics };\n        const listener = (log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                }\n                catch (error) { }\n            }\n            // If fragment is null, we do not deconstruct the args to emit\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n                emit(contract, event, args, (listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            }\n            else {\n                emit(contract, event, [], (listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n        let starting = [];\n        const start = () => {\n            if (starting.length) {\n                return;\n            }\n            starting.push(provider.on(filter, listener));\n        };\n        const stop = async () => {\n            if (starting.length == 0) {\n                return;\n            }\n            let started = starting;\n            starting = [];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n        sub = { tag, listeners: [], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n    await lastEmit;\n    const sub = await hasSub(contract, event);\n    if (!sub) {\n        return false;\n    }\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null : listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        }\n        catch (error) { }\n        return !once;\n    });\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n    return (count > 0);\n}\nasync function emit(contract, event, args, payloadFunc) {\n    try {\n        await lastEmit;\n    }\n    catch (error) { }\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\nconst passProperties = [\"then\"];\nexport class BaseContract {\n    /**\n     *  The target to connect to.\n     *\n     *  This can be an address, ENS name or any [[Addressable]], such as\n     *  another contract. To get the resovled address, use the ``getAddress``\n     *  method.\n     */\n    target;\n    /**\n     *  The contract Interface.\n     */\n    interface;\n    /**\n     *  The connected runner. This is generally a [[Provider]] or a\n     *  [[Signer]], which dictates what operations are supported.\n     *\n     *  For example, a **Contract** connected to a [[Provider]] may\n     *  only execute read-only operations.\n     */\n    runner;\n    /**\n     *  All the Events available on this contract.\n     */\n    filters;\n    /**\n     *  @_ignore:\n     */\n    [internal];\n    /**\n     *  The fallback or receive function if any.\n     */\n    fallback;\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */\n    constructor(target, abi, runner, _deployTx) {\n        assertArgument(typeof (target) === \"string\" || isAddressable(target), \"invalid value for Contract target\", \"target\", target);\n        if (runner == null) {\n            runner = null;\n        }\n        const iface = Interface.from(abi);\n        defineProperties(this, { target, runner, interface: iface });\n        Object.defineProperty(this, internal, { value: {} });\n        let addrPromise;\n        let addr = null;\n        let deployTx = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);\n        }\n        let subs = new Map();\n        // Resolve the target as the address\n        if (typeof (target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n            }\n            else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) {\n                        throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        }\n        else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) {\n                    throw new Error(\"TODO\");\n                }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n        // Add the event filters\n        const filters = new Proxy({}, {\n            get: (target, _prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n                const prop = String(_prop);\n                const result = this.getEvent(prop);\n                if (result) {\n                    return result;\n                }\n                throw new Error(`unknown contract event: ${prop}`);\n            },\n            has: (target, prop) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        defineProperties(this, { filters });\n        defineProperties(this, {\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)) : null)\n        });\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, _prop, receiver) => {\n                if (_prop in target || passProperties.indexOf(_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n                const prop = String(_prop);\n                const result = target.getFunction(prop);\n                if (result) {\n                    return result;\n                }\n                throw new Error(`unknown contract method: ${prop}`);\n            },\n            has: (target, prop) => {\n                if (prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return target.interface.hasFunction(String(prop));\n            }\n        });\n    }\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */\n    connect(runner) {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */\n    attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Return the resolved address of this Contract.\n     */\n    async getAddress() { return await getInternal(this).addrPromise; }\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */\n    async getDeployedCode() {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") {\n            return null;\n        }\n        return code;\n    }\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */\n    async waitForDeployment() {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) {\n            return this;\n        }\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) {\n                        return resolve(this);\n                    }\n                    provider.once(\"block\", checkCode);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */\n    deploymentTransaction() {\n        return getInternal(this).deployTx;\n    }\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getFunction(key) {\n        if (typeof (key) !== \"string\") {\n            key = key.format();\n        }\n        const func = buildWrappedMethod(this, key);\n        return func;\n    }\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getEvent(key) {\n        if (typeof (key) !== \"string\") {\n            key = key.format();\n        }\n        return buildWrappedEvent(this, key);\n    }\n    /**\n     *  @_ignore:\n     */\n    async queryTransaction(hash) {\n        // Is this useful?\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */\n    async queryFilter(event, fromBlock, toBlock) {\n        if (fromBlock == null) {\n            fromBlock = 0;\n        }\n        if (toBlock == null) {\n            toBlock = \"latest\";\n        }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr : (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                }\n                catch (error) { }\n            }\n            if (foundFragment) {\n                return new EventLog(log, this.interface, foundFragment);\n            }\n            else {\n                return new Log(log, provider);\n            }\n        });\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */\n    async on(event, listener) {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */\n    async once(event, listener) {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */\n    async emit(event, ...args) {\n        return await emit(this, event, args, null);\n    }\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */\n    async listenerCount(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        const { subs } = getInternal(this);\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */\n    async listeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        const { subs } = getInternal(this);\n        let result = [];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */\n    async off(event, listener) {\n        const sub = await hasSub(this, event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        return this;\n    }\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */\n    async removeAllListeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return this;\n            }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    /**\n     *  Alias for [on].\n     */\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    /**\n     *  Alias for [off].\n     */\n    async removeListener(event, listener) {\n        return await this.off(event, listener);\n    }\n    /**\n     *  Create a new Class for the %%abi%%.\n     */\n    static buildClass(abi) {\n        class CustomContract extends BaseContract {\n            constructor(address, runner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract;\n    }\n    ;\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */\n    static from(target, abi, runner) {\n        if (runner == null) {\n            runner = null;\n        }\n        const contract = new this(target, abi, runner);\n        return contract;\n    }\n}\nfunction _ContractBase() {\n    return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() {\n}\n//# sourceMappingURL=contract.js.map","// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    interface;\n    /**\n     *  The matching event.\n     */\n    fragment;\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    args;\n    /**\n     * @_ignore:\n     */\n    constructor(log, iface, fragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties(this, { args, fragment, interface: iface });\n    }\n    /**\n     *  The name of the event.\n     */\n    get eventName() { return this.fragment.name; }\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature() { return this.fragment.format(); }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs() {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n            if (fragment) {\n                return new EventLog(log, this.#iface, fragment);\n            }\n            else {\n                return log;\n            }\n        });\n    }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms) {\n        const receipt = await super.wait(confirms);\n        if (receipt == null) {\n            return null;\n        }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n    /**\n     *  The log with no matching events.\n     */\n    log;\n    /**\n     *  @_event:\n     */\n    constructor(contract, listener, filter, log) {\n        super(contract, listener, filter);\n        defineProperties(this, { log });\n    }\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock() {\n        return await this.log.getBlock();\n    }\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction() {\n        return await this.log.getTransaction();\n    }\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt() {\n        return await this.log.getTransactionReceipt();\n    }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n    /**\n     *  @_ignore:\n     */\n    constructor(contract, listener, filter, fragment, _log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties(this, { args, fragment });\n    }\n    /**\n     *  The event name.\n     */\n    get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The event signature.\n     */\n    get eventSignature() {\n        return this.fragment.format();\n    }\n}\n//# sourceMappingURL=wrappers.js.map","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _keccak256 = function (data) {\n    return keccak_256(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function () { locked = true; };\nkeccak256.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256);\n//# sourceMappingURL=keccak.js.map","/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */\nimport { getBytes, toUtf8Bytes, toUtf8String, zeroPadBytes } from \"../utils/index.js\";\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */\nexport function encodeBytes32String(text) {\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return zeroPadBytes(bytes, 32);\n}\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */\nexport function decodeBytes32String(_bytes) {\n    const data = getBytes(_bytes, \"bytes\");\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) {\n        length--;\n    }\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n//# sourceMappingURL=bytes32.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { getBytes } from \"./data.js\";\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    const data = Array.prototype.slice.call(getBytes(object, \"object\"));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nconst nibbles = \"0123456789abcdef\";\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */\nexport function encodeRlp(object) {\n    let result = \"0x\";\n    for (const v of _encode(object)) {\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\n//# sourceMappingURL=rlp-encode.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nexport function getCreateAddress(tx) {\n    const from = getAddress(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    }\n    else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    }\n    else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n    return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));\n}\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nexport function getCreate2Address(_from, _salt, _initCodeHash) {\n    const from = getAddress(_from);\n    const salt = getBytes(_salt, \"salt\");\n    const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n    assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n    assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n    return getAddress(dataSlice(keccak256(concat([\"0xff\", from, salt, initCodeHash])), 12));\n}\n//# sourceMappingURL=contract-address.js.map","/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress = \"0x0000000000000000000000000000000000000000\";\n//# sourceMappingURL=addresses.js.map","/**\n *  A constant for the order N for the secp256k1 curve.\n *\n *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)\n */\nexport const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n/**\n *  A constant for the number of wei in a single ether.\n *\n *  (**i.e.** ``1000000000000000000n``)\n */\nexport const WeiPerEther = BigInt(\"1000000000000000000\");\n/**\n *  A constant for the maximum value for a ``uint256``.\n *\n *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */\nexport const MaxUint256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  A constant for the minimum value for an ``int256``.\n *\n *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)\n */\nexport const MinInt256 = BigInt(\"0x8000000000000000000000000000000000000000000000000000000000000000\") * BigInt(-1);\n/**\n *  A constant for the maximum value for an ``int256``.\n *\n *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */\nexport const MaxInt256 = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n//# sourceMappingURL=numbers.js.map","/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */\nexport const ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n//# sourceMappingURL=hashes.js.map","// NFKC (composed)             // (decomposed)\n/**\n *  A constant for the ether symbol (normalized using NFKC).\n *\n *  (**i.e.** ``\"\\\\u039e\"``)\n */\nexport const EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n/**\n *  A constant for the [[link-eip-191]] personal message prefix.\n *\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\n */\nexport const MessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n//# sourceMappingURL=strings.js.map","import { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport { concat, defineProperties, getBytes, hexlify, assert, assertArgument } from \"../utils/index.js\";\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory {\n    /**\n     *  The Contract Interface.\n     */\n    interface;\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    bytecode;\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    runner;\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */\n    constructor(abi, bytecode, runner) {\n        const iface = Interface.from(abi);\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        }\n        else {\n            if (typeof (bytecode) === \"object\") {\n                bytecode = bytecode.object;\n            }\n            if (!bytecode.startsWith(\"0x\")) {\n                bytecode = \"0x\" + bytecode;\n            }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n        defineProperties(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n    attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n    async getDeployTransaction(...args) {\n        let overrides = {};\n        const fragment = this.interface.deploy;\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n        const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n        return Object.assign({}, overrides, { data });\n    }\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resovle to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n    async deploy(...args) {\n        const tx = await this.getDeployTransaction(...args);\n        assert(this.runner && typeof (this.runner.sendTransaction) === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new BaseContract(address, this.interface, this.runner, sentTx);\n    }\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n    connect(runner) {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n    static fromSolidity(output, runner) {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n        if (typeof (output) === \"string\") {\n            output = JSON.parse(output);\n        }\n        const abi = output.abi;\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        }\n        else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n        return new this(abi, bytecode, runner);\n    }\n}\n//# sourceMappingURL=factory.js.map","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import assert from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    assert.hash(hash);\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    assert.number(c);\n    assert.number(dkLen);\n    assert.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = toBytes(_password);\n    const salt = toBytes(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexport async function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await asyncLoop(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/* Browser Crypto Shims */\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assert, assertArgument } from \"../utils/index.js\";\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nexport function createHash(algo) {\n    switch (algo) {\n        case \"sha256\": return sha256.create();\n        case \"sha512\": return sha512.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexport function createHmac(_algo, key) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac.create(algo, key);\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\n}\nexport function randomBytes(length) {\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\"\n    });\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\n//# sourceMappingURL=crypto-browser.js.map","/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n    return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () { locked = true; };\ncomputeHmac.register = function (func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac);\n//# sourceMappingURL=hmac.js.map","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _ripemd160 = function (data) {\n    return noble_ripemd160(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function () { locked = true; };\nripemd160.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160);\n//# sourceMappingURL=ripemd160.js.map","/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nimport { pbkdf2Sync } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () { locked = true; };\npbkdf2.register = function (func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);\n//# sourceMappingURL=pbkdf2.js.map","/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\nlet locked = false;\nconst _randomBytes = function (length) {\n    return new Uint8Array(crypto_random(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length) {\n    return __randomBytes(length);\n}\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () { locked = true; };\nrandomBytes.register = function (func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes);\n//# sourceMappingURL=random.js.map","import assert from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, u32 } from './utils.js';\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = checkOpts({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    assert.number(N);\n    assert.number(r);\n    assert.number(p);\n    assert.number(dkLen);\n    assert.number(asyncTick);\n    assert.number(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = u32(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = u32(new Uint8Array(blockSize * N));\n    const tmp = u32(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await asyncLoop(N - 1, asyncTick, (i) => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await asyncLoop(N, asyncTick, (i) => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\nlet lockedSync = false, lockedAsync = false;\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\n};\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\n};\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function () { lockedAsync = true; };\nscrypt.register = function (func) {\n    if (lockedAsync) {\n        throw new Error(\"scrypt is locked\");\n    }\n    __scryptAsync = func;\n};\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function () { lockedSync = true; };\nscryptSync.register = function (func) {\n    if (lockedSync) {\n        throw new Error(\"scryptSync is locked\");\n    }\n    __scryptSync = func;\n};\nObject.freeze(scryptSync);\n//# sourceMappingURL=scrypt.js.map","import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nconst _sha256 = function (data) {\n    return createHash(\"sha256\").update(data).digest();\n};\nconst _sha512 = function (data) {\n    return createHash(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () { locked256 = true; };\nsha256.register = function (func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () { locked512 = true; };\nsha512.register = function (func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256);\n//# sourceMappingURL=sha2.js.map","/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\nexport { lock };\n//# sourceMappingURL=index.js.map","import { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n    return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r;\n    #s;\n    #v;\n    #networkV;\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r() { return this.#r; }\n    set r(value) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s() { return this.#s; }\n    set s(_value) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v() { return this.#v; }\n    set v(value) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV() { return this.#networkV; }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId() {\n        const v = this.networkV;\n        if (v == null) {\n            return null;\n        }\n        return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity() {\n        return (this.v === 27) ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS() {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) {\n            yParityAndS[0] |= 0x80;\n        }\n        return hexlify(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized() {\n        return concat([this.r, this.yParityAndS]);\n    }\n    /**\n     *  The serialized representation.\n     */\n    get serialized() {\n        return concat([this.r, this.s, (this.yParity ? \"0x1c\" : \"0x1b\")]);\n    }\n    /**\n     *  @private\n     */\n    constructor(guard, r, s, v) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone() {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) {\n            clone.#networkV = this.networkV;\n        }\n        return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON() {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString() : null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v) {\n        const bv = getBigInt(v, \"v\");\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) {\n            return BN_0;\n        }\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n        return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId, v) {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v) {\n        const bv = getBigInt(v);\n        if (bv === BN_0 || bv === BN_27) {\n            return 27;\n        }\n        if (bv === BN_1 || bv === BN_28) {\n            return 28;\n        }\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig) {\n        function assertError(check, message) {\n            assertArgument(check, message, \"signature\", sig);\n        }\n        ;\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n        if (typeof (sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28 : 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            assertError(false, \"invalid raw signature length\");\n        }\n        if (sig instanceof Signature) {\n            return sig.clone();\n        }\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function (s, yParityAndS) {\n            if (s != null) {\n                return toUint256(s);\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function (_v, yParityAndS, yParity) {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v : undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28 : 27) };\n            }\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) {\n            result.#networkV = networkV;\n        }\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n        return result;\n    }\n}\n//# sourceMappingURL=signature.js.map","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport * as secp256k1 from \"@noble/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key, ...messages) {\n    return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n    /**\n     *  The private key.\n     */\n    get privateKey() { return this.#privateKey; }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const [sigDer, recid] = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            recovered: true,\n            canonical: true\n        });\n        const sig = secp256k1.Signature.fromHex(sigDer);\n        return Signature.from({\n            r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n            s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n            v: (recid ? 0x1c : 0x1b)\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key, compressed) {\n        let bytes = getBytes(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1.Point.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest, signature) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = Signature.from(signature);\n        const der = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s]))).toDERRawBytes();\n        const pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return hexlify(pubKey);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\n//# sourceMappingURL=signing-key.js.map","function decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\n\n// created 2023-02-21T09:18:13.549Z\nvar r$1 = read_compressed_payload('');\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\n\n// created 2023-02-21T09:18:13.549Z\nvar r = read_compressed_payload('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');\n\n// https://unicode.org/reports/tr15/\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nconst SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\nconst EXCLUSIONS = new Set(read_sorted(r));\r\nconst DECOMP = new Map();\r\nconst RECOMP = new Map();\r\nfor (let [cp, cps] of read_mapped(r)) {\r\n\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\tlet [a, b] = cps;\r\n\t\tlet bucket = RECOMP.get(a);\r\n\t\tif (!bucket) {\r\n\t\t\tbucket = new Map();\r\n\t\t\tRECOMP.set(a, bucket);\r\n\t\t}\r\n\t\tbucket.set(b, cp);\r\n\t}\r\n\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n}\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\n//const t0 = performance.now();\r\n\r\nconst STOP = 0x2E;\r\nconst FE0F = 0xFE0F;\r\nconst STOP_CH = '.';\r\nconst UNIQUE_PH = 1;\r\nconst HYPHEN = 0x2D;\r\n\r\nfunction read_set() {\r\n\treturn new Set(read_sorted(r$1));\r\n}\r\nconst MAPPED = new Map(read_mapped(r$1)); \r\nconst IGNORED = read_set(); // ignored characters are not valid, so just read raw codepoints\r\n/*\r\n// direct include from payload is smaller that the decompression code\r\nconst FENCED = new Map(read_array_while(() => {\r\n\tlet cp = r();\r\n\tif (cp) return [cp, read_str(r())];\r\n}));\r\n*/\r\n// 20230217: we still need all CM for proper error formatting\r\n// but norm only needs NSM subset that are potentially-valid\r\nconst CM = read_set();\r\nconst NSM = new Set(read_sorted(r$1).map(function(i) { return this[i]; }, [...CM]));\r\n/*\r\nconst CM_SORTED = read_sorted(r);\r\nconst NSM = new Set(read_sorted(r).map(i => CM_SORTED[i]));\r\nconst CM = new Set(CM_SORTED);\r\n*/\r\nconst ESCAPE = read_set(); // characters that should not be printed\r\nconst NFC_CHECK = read_set();\r\nconst CHUNKS = read_sorted_arrays(r$1);\r\nfunction read_chunked() {\r\n\t// deduplicated sets + uniques\r\n\treturn new Set([read_sorted(r$1).map(i => CHUNKS[i]), read_sorted(r$1)].flat(2));\r\n}\r\nconst UNRESTRICTED = r$1();\r\nconst GROUPS = read_array_while(i => {\r\n\t// minifier property mangling seems unsafe\r\n\t// so these are manually renamed to single chars\r\n\tlet N = read_array_while(r$1).map(x => x+0x60);\r\n\tif (N.length) {\r\n\t\tlet R = i >= UNRESTRICTED; // first arent restricted\r\n\t\tN[0] -= 32; // capitalize\r\n\t\tN = str_from_cps(N);\r\n\t\tif (R) N=`Restricted[${N}]`;\r\n\t\tlet P = read_chunked(); // primary\r\n\t\tlet Q = read_chunked(); // secondary\r\n\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t//let M = r()-1; // combining mark\r\n\t\tlet M = !r$1(); // not-whitelisted, check for NSM\r\n\t\t// code currently isn't needed\r\n\t\t/*if (M < 0) { // whitelisted\r\n\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\tlet i = r();\r\n\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t})];\r\n\t\t\t}));\r\n\t\t}*/\r\n\t\treturn {N, P, M, R, V: new Set(V)};\r\n\t}\r\n});\r\nconst WHOLE_VALID = read_set();\r\nconst WHOLE_MAP = new Map();\r\n// decode compressed wholes\r\n[...WHOLE_VALID, ...read_set()].sort((a, b) => a-b).map((cp, i, v) => {\r\n\tlet d = r$1(); \r\n\tlet w = v[i] = d ? v[i-d] : {V: [], M: new Map()};\r\n\tw.V.push(cp); // add to member set\r\n\tif (!WHOLE_VALID.has(cp)) {\r\n\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t}\r\n});\r\n// compute confusable-extent complements\r\nfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t// connect all groups that have each whole character\r\n\tlet recs = [];\r\n\tfor (let cp of V) {\r\n\t\tlet gs = GROUPS.filter(g => g.V.has(cp));\r\n\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\tif (!rec) {\r\n\t\t\trec = {G: new Set(), V: []};\r\n\t\t\trecs.push(rec);\r\n\t\t}\r\n\t\trec.V.push(cp);\r\n\t\tgs.forEach(g => rec.G.add(g));\r\n\t}\r\n\t// per character cache groups which are not a member of the extent\r\n\tlet union = recs.flatMap(({G}) => [...G]);\r\n\tfor (let {G, V} of recs) {\r\n\t\tlet complement = new Set(union.filter(g => !G.has(g)));\r\n\t\tfor (let cp of V) {\r\n\t\t\tM.set(cp, complement);\r\n\t\t}\r\n\t}\r\n}\r\nlet union = new Set(); // exists in 1+ groups\r\nlet multi = new Set(); // exists in 2+ groups\r\nfor (let g of GROUPS) {\r\n\tfor (let cp of g.V) {\r\n\t\t(union.has(cp) ? multi : union).add(cp);\r\n\t}\r\n}\r\n// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\nfor (let cp of union) {\r\n\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t}\r\n}\r\nconst VALID = new Set([...union, ...nfd(union)]); // possibly valid\r\n\r\n// decode emoji\r\nconst EMOJI_SORTED = read_sorted(r$1); // temporary\r\n//const EMOJI_SOLO = new Set(read_sorted(r).map(i => EMOJI_SORTED[i])); // not needed\r\nconst EMOJI_ROOT = read_emoji_trie([]);\r\nfunction read_emoji_trie(cps) {\r\n\tlet B = read_array_while(() => {\r\n\t\tlet keys = read_sorted(r$1).map(i => EMOJI_SORTED[i]);\r\n\t\tif (keys.length) return read_emoji_trie(keys);\r\n\t}).sort((a, b) => b.Q.size - a.Q.size); // sort by likelihood\r\n\tlet temp = r$1();\r\n\tlet V = temp % 3; // valid (0 = false, 1 = true, 2 = weird)\r\n\ttemp = (temp / 3)|0;\r\n\tlet F = temp & 1; // allow FE0F\r\n\ttemp >>= 1;\r\n\tlet S = temp & 1; // save\r\n\tlet C = temp & 2; // check\r\n\treturn {B, V, F, S, C, Q: new Set(cps)};\r\n}\r\n//console.log(performance.now() - t0);\r\n\r\n// free tagging system\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; }\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error('invalid label extension');\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\nfunction is_combining_mark(cp) {\r\n\treturn CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(process(explode_cp(label), nf).flatMap(x => x.is_emoji ? filter_fe0f(x) : x))).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(ens_split(name));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet split = ens_split(name, true);\r\n\t// this is experimental\r\n\tfor (let {type, output, error} of split) {\r\n\t\tif (error) continue;\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') { \r\n\t\t\tlet prev = 0;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet next = output.indexOf(0x3BE, prev);\r\n\t\t\t\tif (next < 0) break;\r\n\t\t\t\toutput[next] = 0x39E; \r\n\t\t\t\tprev = next + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(split);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\tlet norm;\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = process(input, nfc); // if we parse, we get [norm and mapped]\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens[0];\r\n\t\t\t\tlet emoji = token_count > 1 || chars.is_emoji;\r\n\t\t\t\tif (!emoji && chars.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t\tnorm = chars;\r\n\t\t\t\t\tcheck_leading_underscore(norm);\r\n\t\t\t\t\t// only needed for ascii\r\n\t\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\t\tcheck_label_extension(norm);\r\n\t\t\t\t\t// cant have fenced\r\n\t\t\t\t\t// cant have cm\r\n\t\t\t\t\t// cant have wholes\r\n\t\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\t\ttype = 'ASCII';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (emoji) { // there is at least one emoji\r\n\t\t\t\t\t\tinfo.emoji = true; \r\n\t\t\t\t\t\tchars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnorm = tokens.flatMap(x => !preserve_emoji && x.is_emoji ? filter_fe0f(x) : x);\r\n\t\t\t\t\tcheck_leading_underscore(norm);\r\n\t\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 5. \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\t\tlet unique = [...new Set(chars)];\r\n\t\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\tinfo.output = norm;\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = []; // TODO: can this be avoided?\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : [...set];\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaning groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => g.V.has(cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => g.V.has(cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (groups === GROUPS) {\r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp));\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tlet {V, M} = g;\r\n\tfor (let cp of cps) {\r\n\t\tif (!V.has(cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.V].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`non-spacing marks: repeated ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`non-spacing marks: too many ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\nfunction process(input, nf) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(emoji);\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps);\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// allows optional FE0F\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet saved;\r\n\tlet stack = [];\r\n\tlet pos = cps.length;\r\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\r\n\twhile (pos) {\r\n\t\tlet cp = cps[--pos];\r\n\t\tnode = node.B.find(x => x.Q.has(cp));\r\n\t\tif (!node) break;\r\n\t\tif (node.S) { // remember\r\n\t\t\tsaved = cp;\r\n\t\t} else if (node.C) { // check exclusion\r\n\t\t\tif (cp === saved) break;\r\n\t\t}\r\n\t\tstack.push(cp);\r\n\t\tif (node.F) {\r\n\t\t\tstack.push(FE0F);\r\n\t\t\tif (pos > 0 && cps[pos - 1] == FE0F) pos--; // consume optional FE0F\r\n\t\t}\r\n\t\tif (node.V) { // this is a valid emoji (so far)\r\n\t\t\temoji = conform_emoji_copy(stack, node);\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// *** this code currently isn't needed ***\r\n\tif (!emoji) {\r\n\t\tlet cp = cps[cps.length-1];\r\n\t\tif (EMOJI_SOLO.has(cp)) {\r\n\t\t\tif (eaten) eaten.push(cp);\r\n\t\t\temoji = Emoji.of(cp);\r\n\t\t\tcps.pop();\r\n\t\t}\r\n\t}\r\n\t*/\r\n\treturn emoji;\r\n}\r\n\r\n// create a copy and fix any unicode quirks\r\nfunction conform_emoji_copy(cps, node) {\r\n\tlet copy = Emoji.from(cps); // copy stack\r\n\tif (node.V == 2) copy.splice(1, 1); // delete FE0F at position 1 (see: make.js)\r\n\treturn copy;\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\t// *** this code currently isn't needed ***\r\n\t//let ret = [...EMOJI_SOLO].map(x => [x]);\r\n\tlet ret = [];\r\n\tbuild(EMOJI_ROOT, []);\r\n\treturn ret.sort(compare_arrays);\r\n\tfunction build(node, cps, saved) {\r\n\t\tif (node.S) { \r\n\t\t\tsaved = cps[cps.length-1];\r\n\t\t} else if (node.C) { \r\n\t\t\tif (saved === cps[cps.length-1]) return;\r\n\t\t}\r\n\t\tif (node.F) cps.push(FE0F);\r\n\t\tif (node.V) ret.push(conform_emoji_copy(cps, node));\r\n\t\tfor (let br of node.B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\tbuild(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\t\t\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({type: TY_EMOJI, emoji, input: eaten.slice(), cps: filter_fe0f(emoji)});\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\nexport { ens_beautify, ens_emoji, ens_normalize, ens_normalize_fragment, ens_split, ens_tokenize, is_combining_mark, nfc, nfd, safe_str_from_cps, should_escape };\n","import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n    try {\n        return ens_normalize(name);\n    }\n    catch (error) {\n        assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n    }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n    assertArgument(typeof (name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256((comps.pop()))]));\n    }\n    return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key) {\n    let pubkey;\n    if (typeof (key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    }\n    else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest, signature) {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n//# sourceMappingURL=address.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nexport function hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n        toUtf8Bytes(MessagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyMessage(message, sig) {\n    const digest = hashMessage(message);\n    return recoverAddress(digest, sig);\n}\n//# sourceMappingURL=message.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\");\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = toTwos(value, size);\n        }\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${type}`, \"value\", value);\n        if (isArray) {\n            return getBytes(zeroPadBytes(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${type}`, \"value\", value);\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n    assertArgument(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types, values) {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types, values) {\n    return _keccak256(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types, values) {\n    return _sha256(solidityPacked(types, values));\n}\n//# sourceMappingURL=solidity.js.map","//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return concat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        assertArgument(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (_value) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return toQuantity(value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\n            return function (_value) {\n                const value = getBigInt(_value, \"value\");\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function (value) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    primaryType;\n    #types;\n    /**\n     *  The types.\n     */\n    get types() {\n        return JSON.parse(this.#types);\n    }\n    #fullTypes;\n    #encoderCache;\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(types) {\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        Object.keys(types).forEach((type) => {\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        for (const name in types) {\n            const uniqueNames = new Set();\n            for (const field of types[name]) {\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = (field.type.match(/^([^\\x5b]*)(\\x5b|$)/))[1] || null;\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        defineProperties(this, { primaryType: primaryTypes[0] });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            found.add(type);\n            for (const child of links.get(type)) {\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type) {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n    #getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value) => {\n                assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(concat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type));\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            };\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name) {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n            return value.map((v) => this._visit(match[1], v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain, types, value) {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value) => {\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return { domain, value };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = Object.assign({}, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof (value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=typed-data.js.map","// utils/base64-browser\nimport { getBytes } from \"./data.js\";\nexport function decodeBase64(textData) {\n    textData = atob(textData);\n    const data = new Uint8Array(textData.length);\n    for (let i = 0; i < textData.length; i++) {\n        data[i] = textData.charCodeAt(i);\n    }\n    return getBytes(data);\n}\nexport function encodeBase64(_data) {\n    const data = getBytes(_data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n//# sourceMappingURL=base64-browser.js.map","/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction the each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retreive the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentcation, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\nimport { getUrl } from \"./geturl.js\";\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet getUrlFunc = getUrl;\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n    try {\n        const match = url.match(reData);\n        if (!match) {\n            throw new Error(\"invalid data\");\n        }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]) : unpercent(match[3])));\n    }\n    catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n    }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n    async function gatewayIpfs(url, signal) {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) {\n                throw new Error(\"invalid link\");\n            }\n            return new FetchRequest(`${baseUrl}${match[2]}`);\n        }\n        catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n        }\n    }\n    return gatewayIpfs;\n}\nconst Gateways = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners;\n    #cancelled;\n    constructor(request) {\n        this.#listeners = [];\n        this.#cancelled = false;\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) {\n                return;\n            }\n            this.#cancelled = true;\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [];\n        });\n    }\n    addListener(listener) {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n    get cancelled() { return this.#cancelled; }\n    checkSignal() {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n    }\n}\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n    if (signal == null) {\n        throw new Error(\"missing signal; should not happen\");\n    }\n    signal.checkSignal();\n    return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest {\n    #allowInsecure;\n    #gzip;\n    #headers;\n    #method;\n    #timeout;\n    #url;\n    #body;\n    #bodyType;\n    #creds;\n    // Hooks\n    #preflight;\n    #process;\n    #retry;\n    #signal;\n    #throttle;\n    /**\n     *  The fetch URI to requrest.\n     */\n    get url() { return this.#url; }\n    set url(url) {\n        this.#url = String(url);\n    }\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``) and the .\n     *\n     *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body() {\n        if (this.#body == null) {\n            return null;\n        }\n        return new Uint8Array(this.#body);\n    }\n    set body(body) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        }\n        else if (typeof (body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        }\n        else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        }\n        else if (typeof (body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        }\n        else {\n            throw new Error(\"invalid body\");\n        }\n    }\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody() {\n        return (this.#body != null);\n    }\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method() {\n        if (this.#method) {\n            return this.#method;\n        }\n        if (this.hasBody()) {\n            return \"POST\";\n        }\n        return \"GET\";\n    }\n    set method(method) {\n        if (method == null) {\n            method = \"\";\n        }\n        this.#method = String(method).toUpperCase();\n    }\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any chnages will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers() {\n        const headers = Object.assign({}, this.#headers);\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;\n        }\n        ;\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) {\n            headers[\"content-length\"] = String(this.body.length);\n        }\n        return headers;\n    }\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key, value) {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders() {\n        this.#headers = {};\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [key, headers[key]], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials() {\n        return this.#creds || null;\n    }\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username, password) {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${username}:${password}`;\n    }\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip() {\n        return this.#gzip;\n    }\n    set allowGzip(value) {\n        this.#gzip = !!value;\n    }\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication() {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value) {\n        this.#allowInsecure = !!value;\n    }\n    /**\n     *  The timeout (in milliseconds) to wait for a complere response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout() { return this.#timeout; }\n    set timeout(timeout) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc() {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight) {\n        this.#preflight = preflight;\n    }\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc() {\n        return this.#process || null;\n    }\n    set processFunc(process) {\n        this.#process = process;\n    }\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc() {\n        return this.#retry || null;\n    }\n    set retryFunc(retry) {\n        this.#retry = retry;\n    }\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */\n    constructor(url) {\n        this.#url = String(url);\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = {};\n        this.#method = \"\";\n        this.#timeout = 300000;\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n    }\n    toString() {\n        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params) {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n    async #send(attempt, expires, delay, _request, _response) {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n        if (delay > 0) {\n            await wait(delay);\n        }\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    }\n                    catch (error) {\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof (error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n                        // Ignore throttling\n                    }\n                }\n                return response;\n            }\n            req = result;\n        }\n        // We have a preflight function; update the request\n        if (this.preflightFunc) {\n            req = await this.preflightFunc(req);\n        }\n        const resp = await getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n        if (response.statusCode === 301 || response.statusCode === 302) {\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            }\n            catch (error) { }\n            // Things won't get any better on another attempt; abort\n            return response;\n        }\n        else if (response.statusCode === 429) {\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            }\n            catch (error) {\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof (error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                ;\n                if (error.stall >= 0) {\n                    delay = error.stall;\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        return response;\n    }\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send() {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n    }\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel() {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) {\n            throw new Error(\"missing signal; should not happen\");\n        }\n        signal();\n    }\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location) {\n        // Redirection; for now we only support absolute locataions\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n        });\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({}, this.#headers);\n        if (this.#body) {\n            req.#body = new Uint8Array(this.#body);\n        }\n        req.#bodyType = this.#bodyType;\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n        return req;\n    }\n    /**\n     *  Create a new copy of this request.\n     */\n    clone() {\n        const clone = new FetchRequest(this.url);\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) {\n            clone.#body = this.#body;\n        }\n        clone.#bodyType = this.#bodyType;\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({}, this.#headers);\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n        if (this.allowGzip) {\n            clone.allowGzip = true;\n        }\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) {\n            clone.allowInsecureAuthentication = true;\n        }\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n        return clone;\n    }\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig() {\n        locked = true;\n    }\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme) {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme, func) {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n        }\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        Gateways[scheme] = func;\n    }\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl) {\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        getUrlFunc = getUrl;\n    }\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway() {\n        return dataGatewayFunc;\n    }\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl) {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n;\n/**\n *  The response for a FetchREquest.\n */\nexport class FetchResponse {\n    #statusCode;\n    #statusMessage;\n    #headers;\n    #body;\n    #request;\n    #error;\n    toString() {\n        return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  The response status code.\n     */\n    get statusCode() { return this.#statusCode; }\n    /**\n     *  The response status message.\n     */\n    get statusMessage() { return this.#statusMessage; }\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers() { return Object.assign({}, this.#headers); }\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body() {\n        return (this.#body == null) ? null : new Uint8Array(this.#body);\n    }\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText() {\n        try {\n            return (this.#body == null) ? \"\" : toUtf8String(this.#body);\n        }\n        catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson() {\n        try {\n            return JSON.parse(this.bodyText);\n        }\n        catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [key, headers[key]], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    constructor(statusCode, statusMessage, headers, body, request) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, {});\n        this.#body = ((body == null) ? null : new Uint8Array(body));\n        this.#request = (request || null);\n        this.#error = { message: \"\" };\n    }\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message, error) {\n        let statusMessage;\n        if (!message) {\n            message = `${this.statusCode} ${this.statusMessage}`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n        }\n        else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message, stall) {\n        if (stall == null) {\n            stall = -1;\n        }\n        else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n        const error = new Error(message || \"throttling requests\");\n        defineProperties(error, { stall, throttle: true });\n        throw error;\n    }\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Returns true of the response has a body.\n     */\n    hasBody() {\n        return (this.#body != null);\n    }\n    /**\n     *  The request made for this response.\n     */\n    get request() { return this.#request; }\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok() {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk() {\n        if (this.ok()) {\n            return;\n        }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${this.statusCode} ${this.statusMessage}`;\n        }\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error\n        });\n    }\n}\nfunction getTime() { return (new Date()).getTime(); }\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\nfunction wait(delay) {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n//# sourceMappingURL=fetch.js.map","import { assert } from \"./errors.js\";\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nexport async function getUrl(req, _signal) {\n    const protocol = req.url.split(\":\")[0].toLowerCase();\n    assert(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n        info: { protocol },\n        operation: \"request\"\n    });\n    assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"request\"\n    });\n    let signal = undefined;\n    if (_signal) {\n        const controller = new AbortController();\n        signal = controller.signal;\n        _signal.addListener(() => { controller.abort(); });\n    }\n    const init = {\n        method: req.method,\n        headers: new Headers(Array.from(req)),\n        body: req.body || undefined,\n        signal\n    };\n    const resp = await fetch(req.url, init);\n    const headers = {};\n    resp.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n    });\n    const respBody = await resp.arrayBuffer();\n    const body = (respBody == null) ? null : new Uint8Array(respBody);\n    return {\n        statusCode: resp.status,\n        statusMessage: resp.statusText,\n        headers, body\n    };\n}\n//# sourceMappingURL=geturl-browser.js.map","/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */\n// Show the throttle message only once per service\nconst shown = new Set();\n/**\n *  Displays a warning in tht console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */\nexport function showThrottleMessage(service) {\n    if (shown.has(service)) {\n        return;\n    }\n    shown.add(service);\n    console.log(\"========= NOTICE =========\");\n    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=community.js.map","import { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    name;\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name) {\n        defineProperties(this, { name });\n    }\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone() {\n        return new NetworkPlugin(this.name);\n    }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    effectiveBlock;\n    /**\n     *  The transactions base fee.\n     */\n    txBase;\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate;\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero;\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero;\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey;\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress;\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock, costs) {\n        if (effectiveBlock == null) {\n            effectiveBlock = 0;\n        }\n        super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);\n        const props = { effectiveBlock };\n        function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n                value = nullish;\n            }\n            assertArgument(typeof (value) === \"number\", `invalud value for ${name}`, \"costs\", costs);\n            props[name] = value;\n        }\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n        defineProperties(this, props);\n    }\n    clone() {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    address;\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    targetNetwork;\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address, targetNetwork) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)\n        });\n    }\n    clone() {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    #feeDataFunc;\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc() {\n        return this.#feeDataFunc;\n    }\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider) {\n        return await this.#feeDataFunc(provider);\n    }\n    clone() {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n//# sourceMappingURL=plugins-network.js.map","/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name;\n    #chainId;\n    #plugins;\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name, chainId) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON() {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name() { return this.#name; }\n    set name(value) { this.#name = value; }\n    /**\n     *  The network chain ID.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value, \"chainId\"); }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other) {\n        if (other == null) {\n            return false;\n        }\n        if (typeof (other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            }\n            catch (error) { }\n            return (this.name === other);\n        }\n        if (typeof (other) === \"number\" || typeof (other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            }\n            catch (error) { }\n            return false;\n        }\n        if (typeof (other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                }\n                catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin(name) {\n        return (this.#plugins.get(name)) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins(basename) {\n        return (this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n    clone() {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx) {\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n        let gas = costs.txBase;\n        if (tx.to == null) {\n            gas += costs.txCreate;\n        }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                }\n                else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n        return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network) {\n        injectCommonNetworks();\n        // Default network\n        if (network == null) {\n            return Network.from(\"mainnet\");\n        }\n        // Canonical name or chain ID\n        if (typeof (network) === \"number\") {\n            network = BigInt(network);\n        }\n        if (typeof (network) === \"string\" || typeof (network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n                return networkFunc();\n            }\n            if (typeof (network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n        // Clonable with network-like abilities\n        if (typeof (network.clone) === \"function\") {\n            const clone = network.clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n        // Networkish\n        if (typeof (network) === \"object\") {\n            assertArgument(typeof (network.name) === \"string\" && typeof (network.chainId) === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom = new Network((network.name), (network.chainId));\n            if (network.ensAddress || network.ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n            return custom;\n        }\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId, networkFunc) {\n        if (typeof (nameOrChainId) === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n        }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n    if (injected) {\n        return;\n    }\n    injected = true;\n    /// Register popular Ethereum networks\n    function registerEth(name, chainId, options) {\n        const func = function () {\n            const network = new Network(name, chainId);\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n            if (options.priorityFee) {\n                //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n            }\n            /*\n                        if (options.etherscan) {\n                            const { url, apiKey } = options.etherscan;\n                            network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                        }\n            */\n            network.attachPlugin(new GasCostPlugin());\n            return network;\n        };\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [\"homestead\"] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, {});\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"optimism-goerli\", 420, {\n        etherscan: { url: \"https:/\\/api-goerli-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api.arbiscan.io/\" }\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {\n        etherscan: { url: \"https:/\\/api-goerli.arbiscan.io/\" }\n    });\n    // Polygon has a 35 gwei maxPriorityFee requirement\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        //        priorityFee: 35000000000,\n        etherscan: {\n            //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api.polygonscan.com/\"\n        }\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [\"maticMumbai\", \"maticmum\"],\n        //        priorityFee: 35000000000,\n        etherscan: {\n            //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api-testnet.polygonscan.com/\"\n        }\n    });\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1,\n        etherscan: {\n            //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api.bscscan.com\"\n        }\n    });\n    registerEth(\"bnbt\", 97, {\n        etherscan: {\n            //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api-testnet.bscscan.com\"\n        }\n    });\n}\n//# sourceMappingURL=network.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { getBytes } from \"./data.js\";\nfunction hexlifyByte(value) {\n    let result = value.toString(16);\n    while (result.length < 2) {\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        assert(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length, offset\n        });\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    assert(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data, length: 0, offset: 1\n    });\n    const checkOffset = (offset) => {\n        assert(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length: data.length, offset\n        });\n    };\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        checkOffset(offset + 1 + length);\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        checkOffset(offset + 1 + length);\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\n}\n/**\n *  Decodes %%data%% into the structured data it represents.\n */\nexport function decodeRlp(_data) {\n    const data = getBytes(_data, \"data\");\n    const decoded = _decode(data, 0);\n    assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n}\n//# sourceMappingURL=rlp-decode.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return accessListify(value);\n    }\n    catch (error) {\n        assertArgument(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n    const fields = decodeRlp(data);\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: hexlify(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    }\n    else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n        tx.hash = keccak256(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return encodeRlp(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    }\n    else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    }\n    catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n    const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n    const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: hexlify(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x01\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n    #type;\n    #to;\n    #data;\n    #nonce;\n    #gasLimit;\n    #gasPrice;\n    #maxPriorityFeePerGas;\n    #maxFeePerGas;\n    #value;\n    #chainId;\n    #sig;\n    #accessList;\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type() { return this.#type; }\n    set type(value) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0:\n            case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                this.#type = 2;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName() {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to() { return this.#to; }\n    set to(value) {\n        this.#to = (value == null) ? null : getAddress(value);\n    }\n    /**\n     *  The transaction nonce.\n     */\n    get nonce() { return this.#nonce; }\n    set nonce(value) { this.#nonce = getNumber(value, \"value\"); }\n    /**\n     *  The gas limit.\n     */\n    get gasLimit() { return this.#gasLimit; }\n    set gasLimit(value) { this.#gasLimit = getBigInt(value); }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice() {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        this.#gasPrice = (value == null) ? null : getBigInt(value, \"gasPrice\");\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas() {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas() {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        this.#maxFeePerGas = (value == null) ? null : getBigInt(value, \"maxFeePerGas\");\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data() { return this.#data; }\n    set data(value) { this.#data = hexlify(value); }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */\n    get value() { return this.#value; }\n    set value(value) {\n        this.#value = getBigInt(value, \"value\");\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value); }\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature() { return this.#sig || null; }\n    set signature(value) {\n        this.#sig = (value == null) ? null : Signature.from(value);\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList() {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2) {\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        this.#accessList = (value == null) ? null : accessListify(value);\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BigInt(0);\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BigInt(0);\n        this.#chainId = BigInt(0);\n        this.#sig = null;\n        this.#accessList = null;\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return keccak256(this.serialized);\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash() {\n        return keccak256(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned() {\n        //isSigned(): this is SignedTransaction {\n        return this.signature != null;\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized() {\n        assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized() {\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".unsignedSerialized\" });\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType() {\n        return (this.inferTypes().pop());\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        }\n        else {\n            if (hasFee) {\n                types.push(2);\n            }\n            else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            }\n            else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            }\n            else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON() {\n        const s = (v) => {\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof (tx) === \"string\") {\n            const payload = getBytes(tx);\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch (payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=transaction.js.map","/**\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\n *  to be encoded as a compact string using a radix of 58 using only\n *  alpha-numeric characters. Confusingly similar characters are omitted\n *  (i.e. ``\"l0O\"``).\n *\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\n *  since any zero-bytes on the left would get removed. To mitigate this\n *  issue most schemes that use Base58 choose specific high-order values\n *  to ensure non-zero prefixes.\n *\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument } from \"./errors.js\";\nimport { toBigInt } from \"./maths.js\";\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nlet Lookup = null;\nfunction getAlpha(letter) {\n    if (Lookup == null) {\n        Lookup = {};\n        for (let i = 0; i < Alphabet.length; i++) {\n            Lookup[Alphabet[i]] = BigInt(i);\n        }\n    }\n    const result = Lookup[letter];\n    assertArgument(result != null, `invalid base58 value`, \"letter\", letter);\n    return result;\n}\nconst BN_0 = BigInt(0);\nconst BN_58 = BigInt(58);\n/**\n *  Encode %%value%% as a Base58-encoded string.\n */\nexport function encodeBase58(_value) {\n    let value = toBigInt(getBytes(_value));\n    let result = \"\";\n    while (value) {\n        result = Alphabet[Number(value % BN_58)] + result;\n        value /= BN_58;\n    }\n    return result;\n}\n/**\n *  Decode the Base58-encoded %%value%%.\n */\nexport function decodeBase58(value) {\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result *= BN_58;\n        result += getAlpha(value[i]);\n    }\n    return result;\n}\n//# sourceMappingURL=base58.js.map","/**\n *  ENS is a service which allows easy-to-remember names to map to\n *  network addresses.\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */\nimport { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport { hexlify, isHexString, toBeHex, defineProperties, encodeBase58, assert, assertArgument, isError, FetchRequest } from \"../utils/index.js\";\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n;\n;\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */\nexport class MulticoinProviderPlugin {\n    /**\n     *  The name.\n     */\n    name;\n    /**\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\n     */\n    constructor(name) {\n        defineProperties(this, { name });\n    }\n    connect(proivder) {\n        return this;\n    }\n    /**\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\n     */\n    supportsCoinType(coinType) {\n        return false;\n    }\n    /**\n     *  Resovles to the encoded %%address%% for %%coinType%%.\n     */\n    async encodeAddress(coinType, address) {\n        throw new Error(\"unsupported coin\");\n    }\n    /**\n     *  Resovles to the decoded %%data%% for %%coinType%%.\n     */\n    async decodeAddress(coinType, data) {\n        throw new Error(\"unsupported coin\");\n    }\n}\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n/**\n *  A **BasicMulticoinProviderPlugin** provides service for common\n *  coin types, which do not require additional libraries to encode or\n *  decode.\n */\nexport class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    /**\n     *  Creates a new **BasicMulticoinProviderPlugin**.\n     */\n    constructor() {\n        super(BasicMulticoinPluginId);\n    }\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */\nexport class EnsResolver {\n    /**\n     *  The connected provider.\n     */\n    provider;\n    /**\n     *  The address of the resolver.\n     */\n    address;\n    /**\n     *  The name this resolver was resolved against.\n     */\n    name;\n    // For EIP-2544 names, the ancestor that provided the resolver\n    #supports2544;\n    #resolver;\n    constructor(provider, address, name) {\n        defineProperties(this, { provider, address, name });\n        this.#supports2544 = null;\n        this.#resolver = new Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\",\n        ], provider);\n    }\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */\n    async supportsWildcard() {\n        if (this.#supports2544 == null) {\n            this.#supports2544 = (async () => {\n                try {\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\n                }\n                catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if (isError(error, \"CALL_EXCEPTION\")) {\n                        return false;\n                    }\n                    // Let future attempts try again...\n                    this.#supports2544 = null;\n                    throw error;\n                }\n            })();\n        }\n        return await this.#supports2544;\n    }\n    async #fetch(funcName, params) {\n        params = (params || []).slice();\n        const iface = this.#resolver.interface;\n        // The first parameters is always the nodehash\n        params.unshift(namehash(this.name));\n        let fragment = null;\n        if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n                info: { funcName }\n            });\n            params = [\n                dnsEncode(this.name),\n                iface.encodeFunctionData(fragment, params)\n            ];\n            funcName = \"resolve(bytes,bytes)\";\n        }\n        params.push({\n            enableCcipRead: true\n        });\n        try {\n            const result = await this.#resolver[funcName](...params);\n            if (fragment) {\n                return iface.decodeFunctionResult(fragment, result)[0];\n            }\n            return result;\n        }\n        catch (error) {\n            if (!isError(error, \"CALL_EXCEPTION\")) {\n                throw error;\n            }\n        }\n        return null;\n    }\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */\n    async getAddress(coinType) {\n        if (coinType == null) {\n            coinType = 60;\n        }\n        if (coinType === 60) {\n            try {\n                const result = await this.#fetch(\"addr(bytes32)\");\n                // No address\n                if (result == null || result === ZeroAddress) {\n                    return null;\n                }\n                return result;\n            }\n            catch (error) {\n                if (isError(error, \"CALL_EXCEPTION\")) {\n                    return null;\n                }\n                throw error;\n            }\n        }\n        // Try decoding its EVM canonical chain as an EVM chain address first\n        if (coinType >= 0 && coinType < 0x80000000) {\n            let ethCoinType = coinType + 0x80000000;\n            const data = await this.#fetch(\"addr(bytes32,uint)\", [ethCoinType]);\n            if (isHexString(data, 20)) {\n                return getAddress(data);\n            }\n        }\n        let coinPlugin = null;\n        for (const plugin of this.provider.plugins) {\n            if (!(plugin instanceof MulticoinProviderPlugin)) {\n                continue;\n            }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n        if (coinPlugin == null) {\n            return null;\n        }\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [coinType]);\n        // No address\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // Compute the address\n        const address = await coinPlugin.decodeAddress(coinType, data);\n        if (address != null) {\n            return address;\n        }\n        assert(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${coinType})`,\n            info: { coinType, data }\n        });\n    }\n    /**\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */\n    async getText(key) {\n        const data = await this.#fetch(\"text(bytes32,string)\", [key]);\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        return data;\n    }\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */\n    async getContentHash() {\n        // keccak256(\"contenthash()\")\n        const data = await this.#fetch(\"contenthash(bytes32)\");\n        // No contenthash\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = (ipfs[1] === \"e3010170\") ? \"ipfs\" : \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return `${scheme}:/\\/${encodeBase58(\"0x\" + ipfs[2])}`;\n            }\n        }\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n        if (swarm && swarm[1].length === 64) {\n            return `bzz:/\\/${swarm[1]}`;\n        }\n        assert(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: { data }\n        });\n    }\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */\n    async getAvatar() {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */\n    async _getAvatar() {\n        const linkage = [{ type: \"name\", value: this.name }];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({ type: \"!avatar\", value: \"\" });\n                return { url: null, linkage };\n            }\n            linkage.push({ type: \"avatar\", value: avatar });\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) {\n                    continue;\n                }\n                const scheme = match[1].toLowerCase();\n                switch (scheme) {\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({ type: \"url\", value: avatar });\n                        return { linkage, url: avatar };\n                    case \"ipfs\": {\n                        const url = getIpfsLink(avatar);\n                        linkage.push({ type: \"ipfs\", value: avatar });\n                        linkage.push({ type: \"url\", value: url });\n                        return { linkage, url };\n                    }\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n                        linkage.push({ type: scheme, value: avatar });\n                        // The owner of this name\n                        const owner = await this.getAddress();\n                        if (owner == null) {\n                            linkage.push({ type: \"!owner\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) {\n                            linkage.push({ type: `!${scheme}caip`, value: (match[2] || \"\") });\n                            return { url: null, linkage };\n                        }\n                        const tokenId = comps[1];\n                        const contract = new Contract(comps[0], [\n                            // ERC-721\n                            \"function tokenURI(uint) view returns (string)\",\n                            \"function ownerOf(uint) view returns (address)\",\n                            // ERC-1155\n                            \"function uri(uint) view returns (string)\",\n                            \"function balanceOf(address, uint256) view returns (uint)\"\n                        ], this.provider);\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            const tokenOwner = await contract.ownerOf(tokenId);\n                            if (owner !== tokenOwner) {\n                                linkage.push({ type: \"!owner\", value: tokenOwner });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"owner\", value: tokenOwner });\n                        }\n                        else if (scheme === \"erc1155\") {\n                            const balance = await contract.balanceOf(owner, tokenId);\n                            if (!balance) {\n                                linkage.push({ type: \"!balance\", value: \"0\" });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"balance\", value: balance.toString() });\n                        }\n                        // Call the token contract for the metadata URL\n                        let metadataUrl = await contract[selector](tokenId);\n                        if (metadataUrl == null || metadataUrl === \"0x\") {\n                            linkage.push({ type: \"!metadata-url\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n                        linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\n                        }\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n                        linkage.push({ type: \"metadata-url\", value: metadataUrl });\n                        // Get the token metadata\n                        let metadata = {};\n                        const response = await (new FetchRequest(metadataUrl)).send();\n                        response.assertOk();\n                        try {\n                            metadata = response.bodyJson;\n                        }\n                        catch (error) {\n                            try {\n                                linkage.push({ type: \"!metadata\", value: response.bodyText });\n                            }\n                            catch (error) {\n                                const bytes = response.body;\n                                if (bytes) {\n                                    linkage.push({ type: \"!metadata\", value: hexlify(bytes) });\n                                }\n                                return { url: null, linkage };\n                            }\n                            return { url: null, linkage };\n                        }\n                        if (!metadata) {\n                            linkage.push({ type: \"!metadata\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n                        linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof (imageUrl) !== \"string\") {\n                            linkage.push({ type: \"!imageUrl\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        }\n                        else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) {\n                                linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n                        linkage.push({ type: \"url\", value: imageUrl });\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        }\n        catch (error) { }\n        return { linkage, url: null };\n    }\n    static async getEnsAddress(provider) {\n        const network = await provider.getNetwork();\n        const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\");\n        // No ENS...\n        assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\", info: { network }\n        });\n        return ensPlugin.address;\n    }\n    static async #getResolver(provider, name) {\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\n        try {\n            const contract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n            const addr = await contract.resolver(namehash(name), {\n                enableCcipRead: true\n            });\n            if (addr === ZeroAddress) {\n                return null;\n            }\n            return addr;\n        }\n        catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32),\n            // so probably a link error\n            throw error;\n        }\n        return null;\n    }\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */\n    static async fromName(provider, name) {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") {\n                return null;\n            }\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") {\n                return null;\n            }\n            // Check the current node for a resolver\n            const addr = await EnsResolver.#getResolver(provider, currentName);\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) {\n                    return null;\n                }\n                return resolver;\n            }\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n}\n//# sourceMappingURL=ens-resolver.js.map","/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, getNumber, hexlify, isHexString, zeroPadValue, assert, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nexport function allowNull(format, nullValue) {\n    return (function (value) {\n        if (value == null) {\n            return nullValue;\n        }\n        return format(value);\n    });\n}\nexport function arrayOf(format) {\n    return ((array) => {\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        return array.map((i) => format(i));\n    });\n}\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format, altNames) {\n    return ((value) => {\n        const result = {};\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) {\n                    result[key] = nv;\n                }\n            }\n            catch (error) {\n                const message = (error instanceof Error) ? error.message : \"not-an-error\";\n                assert(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", { value });\n            }\n        }\n        return result;\n    });\n}\nexport function formatBoolean(value) {\n    switch (value) {\n        case true:\n        case \"true\":\n            return true;\n        case false:\n        case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexport function formatData(value) {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\nexport function formatHash(value) {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\nexport function formatUint256(value) {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [\"logIndex\"]\n});\nexport function formatLog(value) {\n    return _formatLog(value);\n}\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: getNumber,\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n    miner: allowNull(getAddress),\n    extraData: formatData,\n    baseFeePerGas: allowNull(getBigInt)\n});\nexport function formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx) => {\n        if (typeof (tx) === \"string\") {\n            return tx;\n        }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [\"logIndex\"]\n});\nexport function formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n}\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [\"gasPrice\"],\n    hash: [\"transactionHash\"],\n    index: [\"transactionIndex\"],\n});\nexport function formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n}\nexport function formatTransactionResponse(value) {\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n        hash: formatHash,\n        type: (value) => {\n            if (value === \"0x\" || value == null) {\n                return 0;\n            }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n        //confirmations: allowNull(getNumber, null),\n        from: getAddress,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n        creates: allowNull(getAddress, null),\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [\"input\"],\n        gasLimit: [\"gas\"]\n    })(value);\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n    // @TODO: Check fee data\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [];\n    }\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    }\n    else {\n        result.signature = Signature.from(value);\n    }\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) {\n            result.chainId = chainId;\n        }\n    }\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n    return result;\n}\n//# sourceMappingURL=format.js.map","import { assert, isHexString } from \"../utils/index.js\";\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport function getPollingSubscriber(provider, event) {\n    if (event === \"block\") {\n        return new PollingBlockSubscriber(provider);\n    }\n    if (isHexString(event, 32)) {\n        return new PollingTransactionSubscriber(provider, event);\n    }\n    assert(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\", info: { event }\n    });\n}\n// @TODO: refactor this\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingBlockSubscriber {\n    #provider;\n    #poller;\n    #interval;\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber;\n    /**\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider) {\n        this.#provider = provider;\n        this.#poller = null;\n        this.#interval = 4000;\n        this.#blockNumber = -2;\n    }\n    /**\n     *  The polling interval.\n     */\n    get pollingInterval() { return this.#interval; }\n    set pollingInterval(value) { this.#interval = value; }\n    async #poll() {\n        try {\n            const blockNumber = await this.#provider.getBlockNumber();\n            // Bootstrap poll to setup our initial block number\n            if (this.#blockNumber === -2) {\n                this.#blockNumber = blockNumber;\n                return;\n            }\n            // @TODO: Put a cap on the maximum number of events per loop?\n            if (blockNumber !== this.#blockNumber) {\n                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {\n                    // We have been stopped\n                    if (this.#poller == null) {\n                        return;\n                    }\n                    await this.#provider.emit(\"block\", b);\n                }\n                this.#blockNumber = blockNumber;\n            }\n        }\n        catch (error) {\n            // @TODO: Minor bump, add an \"error\" event to let subscribers\n            //        know things went awry.\n            //console.log(error);\n        }\n        // We have been stopped\n        if (this.#poller == null) {\n            return;\n        }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n    }\n    start() {\n        if (this.#poller) {\n            return;\n        }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        this.#poll();\n    }\n    stop() {\n        if (!this.#poller) {\n            return;\n        }\n        this.#provider._clearTimeout(this.#poller);\n        this.#poller = null;\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            this.#blockNumber = -2;\n        }\n    }\n    resume() {\n        this.start();\n    }\n}\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class OnBlockSubscriber {\n    #provider;\n    #poll;\n    #running;\n    /**\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider) {\n        this.#provider = provider;\n        this.#running = false;\n        this.#poll = (blockNumber) => {\n            this._poll(blockNumber, this.#provider);\n        };\n    }\n    /**\n     *  Called on every new block.\n     */\n    async _poll(blockNumber, provider) {\n        throw new Error(\"sub-classes must override this\");\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        this.#poll(-2);\n        this.#provider.on(\"block\", this.#poll);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#provider.off(\"block\", this.#poll);\n    }\n    pause(dropWhilePaused) { this.stop(); }\n    resume() { this.start(); }\n}\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingOrphanSubscriber extends OnBlockSubscriber {\n    #filter;\n    constructor(provider, filter) {\n        super(provider);\n        this.#filter = copy(filter);\n    }\n    async _poll(blockNumber, provider) {\n        throw new Error(\"@TODO\");\n        console.log(this.#filter);\n    }\n}\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingTransactionSubscriber extends OnBlockSubscriber {\n    #hash;\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%hash%%.\n     */\n    constructor(provider, hash) {\n        super(provider);\n        this.#hash = hash;\n    }\n    async _poll(blockNumber, provider) {\n        const tx = await provider.getTransactionReceipt(this.#hash);\n        if (tx) {\n            provider.emit(this.#hash, tx);\n        }\n    }\n}\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingEventSubscriber {\n    #provider;\n    #filter;\n    #poller;\n    #running;\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber;\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%filter%%.\n     */\n    constructor(provider, filter) {\n        this.#provider = provider;\n        this.#filter = copy(filter);\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#blockNumber = -2;\n    }\n    async #poll(blockNumber) {\n        // The initial block hasn't been determined yet\n        if (this.#blockNumber === -2) {\n            return;\n        }\n        const filter = copy(this.#filter);\n        filter.fromBlock = this.#blockNumber + 1;\n        filter.toBlock = blockNumber;\n        const logs = await this.#provider.getLogs(filter);\n        // No logs could just mean the node has not indexed them yet,\n        // so we keep a sliding window of 60 blocks to keep scanning\n        if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n                this.#blockNumber = blockNumber - 60;\n            }\n            return;\n        }\n        for (const log of logs) {\n            this.#provider.emit(this.#filter, log);\n            // Only advance the block number when logs were found to\n            // account for networks (like BNB and Polygon) which may\n            // sacrifice event consistency for block event speed\n            this.#blockNumber = log.blockNumber;\n        }\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber) => {\n                this.#blockNumber = blockNumber;\n            });\n        }\n        this.#provider.on(\"block\", this.#poller);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#provider.off(\"block\", this.#poller);\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            this.#blockNumber = -2;\n        }\n    }\n    resume() {\n        this.start();\n    }\n}\n//# sourceMappingURL=subscriber-polling.js.map","/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { concat, dataLength, dataSlice, hexlify, isHexString, getBigInt, getBytes, getNumber, isCallException, isError, makeError, assert, assertArgument, FetchRequest, toBeArray, toQuantity, defineProperties, EventPayload, resolveProperties, toUtf8String } from \"../utils/index.js\";\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport { formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse } from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport { PollingBlockSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber } from \"./subscriber-polling.js\";\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n    return (value && typeof (value.then) === \"function\");\n}\nfunction getTag(prefix, value) {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) {\n            return \"null\";\n        }\n        if (typeof (v) === \"bigint\") {\n            return `bigint:${v.toString()}`;\n        }\n        if (typeof (v) === \"string\") {\n            return v.toLowerCase();\n        }\n        // Sort object keys\n        if (typeof (v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, {});\n        }\n        return v;\n    });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber {\n    /**\n     *  The name fof the event.\n     */\n    name;\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */\n    constructor(name) { defineProperties(this, { name }); }\n    start() { }\n    stop() { }\n    pause(dropWhilePaused) { }\n    resume() { }\n}\nfunction copy(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n    items = Array.from((new Set(items)).values());\n    items.sort();\n    return items;\n}\nasync function getSubscription(_event, provider) {\n    if (_event == null) {\n        throw new Error(\"invalid event\");\n    }\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) {\n        _event = { topics: _event };\n    }\n    if (typeof (_event) === \"string\") {\n        switch (_event) {\n            case \"block\":\n            case \"pending\":\n            case \"debug\":\n            case \"error\":\n            case \"network\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n    if (_event.orphan) {\n        const event = _event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n    if ((_event.address || _event.topics)) {\n        const event = _event;\n        const filter = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) {\n                    return null;\n                }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n        if (event.address) {\n            const addresses = [];\n            const promises = [];\n            const addAddress = (addr) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                }\n                else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            };\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            }\n            else {\n                addAddress(event.address);\n            }\n            if (promises.length) {\n                await Promise.all(promises);\n            }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() { return (new Date()).getTime(); }\nconst defaultOptions = {\n    cacheTimeout: 250\n};\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider {\n    #subs;\n    #plugins;\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState;\n    #destroyed;\n    #networkPromise;\n    #anyNetwork;\n    #performCache;\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber;\n    #nextTimer;\n    #timers;\n    #disableCcipRead;\n    #options;\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */\n    constructor(_network, options) {\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        }\n        else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        }\n        else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n        this.#lastBlockNumber = -1;\n        this.#performCache = new Map();\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n        this.#destroyed = false;\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n        this.#disableCcipRead = false;\n    }\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */\n    get provider() { return this; }\n    /**\n     *  Returns all the registered plug-ins.\n     */\n    get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new plug-in.\n     */\n    attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.connect(this));\n        return this;\n    }\n    /**\n     *  Get a plugin by name.\n     */\n    getPlugin(name) {\n        return (this.#plugins.get(name)) || null;\n    }\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n    get disableCcipRead() { return this.#disableCcipRead; }\n    set disableCcipRead(value) { this.#disableCcipRead = !!value; }\n    // Shares multiple identical requests made during the same 250ms\n    async #perform(req) {\n        const timeout = this.#options.cacheTimeout;\n        // Caching disabled\n        if (timeout < 0) {\n            return await this._perform(req);\n        }\n        // Create a tag\n        const tag = getTag(req.method, req);\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n            this.#performCache.set(tag, perform);\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n        return await perform;\n    }\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    async ccipReadFetch(tx, calldata, urls) {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n            return null;\n        }\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n        const errorMessages = [];\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n            let errorMessage = \"unknown error\";\n            const resp = await request.send();\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                    return result.data;\n                }\n                if (result.message) {\n                    errorMessage = result.message;\n                }\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            }\n            catch (error) { }\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n        assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n    _wrapBlock(value, network) {\n        return new Block(formatBlock(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n    _wrapLog(value, network) {\n        return new Log(formatLog(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n    _wrapTransactionReceipt(value, network) {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n    _wrapTransactionResponse(tx, network) {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n    _detectNetwork() {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n    async _perform(req) {\n        assert(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n    // State\n    async getBlockNumber() {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) {\n            this.#lastBlockNumber = blockNumber;\n        }\n        return blockNumber;\n    }\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n    _getAddress(address) {\n        return resolveAddress(address, this);\n    }\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n    _getBlockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) {\n                return blockTag;\n            }\n            return toQuantity(blockTag);\n        }\n        if (typeof (blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n        if (typeof (blockTag) === \"number\") {\n            if (blockTag >= 0) {\n                return toQuantity(blockTag);\n            }\n            if (this.#lastBlockNumber >= 0) {\n                return toQuantity(this.#lastBlockNumber + blockTag);\n            }\n            return this.getBlockNumber().then((b) => toQuantity(b + blockTag));\n        }\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n    _getFilter(filter) {\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || []).map((t) => {\n            if (t == null) {\n                return null;\n            }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash : undefined;\n        const resolve = (_address, fromBlock, toBlock) => {\n            let address = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n            const filter = {};\n            if (address) {\n                filter.address = address;\n            }\n            if (topics.length) {\n                filter.topics = topics;\n            }\n            if (fromBlock) {\n                filter.fromBlock = fromBlock;\n            }\n            if (toBlock) {\n                filter.toBlock = toBlock;\n            }\n            if (blockHash) {\n                filter.blockHash = blockHash;\n            }\n            return filter;\n        };\n        // Addresses could be async (ENS names or Addressables)\n        let address = [];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) {\n                    address.push(this._getAddress(addr));\n                }\n            }\n            else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n        let fromBlock = undefined;\n        if (\"fromBlock\" in filter) {\n            fromBlock = this._getBlockTag(filter.fromBlock);\n        }\n        let toBlock = undefined;\n        if (\"toBlock\" in filter) {\n            toBlock = this._getBlockTag(filter.toBlock);\n        }\n        if (address.filter((a) => (typeof (a) !== \"string\")).length ||\n            (fromBlock != null && typeof (fromBlock) !== \"string\") ||\n            (toBlock != null && typeof (toBlock) !== \"string\")) {\n            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n        return resolve(address, fromBlock, toBlock);\n    }\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n    _getTransactionRequest(_request) {\n        const request = copyRequest(_request);\n        const promises = [];\n        [\"to\", \"from\"].forEach((key) => {\n            if (request[key] == null) {\n                return;\n            }\n            const addr = resolveAddress(request[key]);\n            if (isPromise(addr)) {\n                promises.push((async function () { request[key] = await addr; })());\n            }\n            else {\n                request[key] = addr;\n            }\n        });\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function () { request.blockTag = await blockTag; })());\n            }\n            else {\n                request.blockTag = blockTag;\n            }\n        }\n        if (promises.length) {\n            return (async function () {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n        return request;\n    }\n    async getNetwork() {\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n            // Detect the current network (shared with all calls)\n            const detectNetwork = this._detectNetwork().then((network) => {\n                this.emit(\"network\", network, null);\n                return network;\n            }, (error) => {\n                // Reset the networkPromise on failure, so we will try again\n                if (this.#networkPromise === detectNetwork) {\n                    this.#networkPromise = null;\n                }\n                throw error;\n            });\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n        const networkPromise = this.#networkPromise;\n        const [expected, actual] = await Promise.all([\n            networkPromise,\n            this._detectNetwork() // The actual connected network\n        ]);\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            }\n            else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n        return expected.clone();\n    }\n    async getFeeData() {\n        const { block, gasPrice } = await resolveProperties({\n            block: this.getBlock(\"latest\"),\n            gasPrice: ((async () => {\n                try {\n                    const gasPrice = await this.#perform({ method: \"getGasPrice\" });\n                    return getBigInt(gasPrice, \"%response\");\n                }\n                catch (error) { }\n                return null;\n            })())\n        });\n        let maxFeePerGas = null, maxPriorityFeePerGas = null;\n        if (block && block.baseFeePerGas) {\n            // We may want to compute this more accurately in the future,\n            // using the formula \"check if the base fee is correct\".\n            // See: https://eips.ethereum.org/EIPS/eip-1559\n            maxPriorityFeePerGas = BigInt(\"1000000000\");\n            // Allow a network to override their maximum priority fee per gas\n            //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n            //if (priorityFeePlugin) {\n            //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n            //}\n            maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n        }\n        return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n    }\n    async estimateGas(_tx) {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) {\n            tx = await tx;\n        }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n    async #call(tx, blockTag, attempt) {\n        assert(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n            reason: \"TOO_MANY_REDIRECTS\",\n            transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })\n        });\n        // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n        const transaction = copyRequest(tx);\n        try {\n            return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n        }\n        catch (error) {\n            // CCIP Read OffchainLookup\n            if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                const data = error.data;\n                const txSender = await resolveAddress(transaction.to, this);\n                // Parse the CCIP Read Arguments\n                let ccipArgs;\n                try {\n                    ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                }\n                catch (error) {\n                    assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                        reason: \"BAD_DATA\", transaction, info: { data }\n                    });\n                }\n                // Check the sender of the OffchainLookup matches the transaction\n                assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                    action: \"call\",\n                    data,\n                    reason: \"OffchainLookup\",\n                    transaction: transaction,\n                    invocation: null,\n                    revert: {\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        name: \"OffchainLookup\",\n                        args: ccipArgs.errorArgs\n                    }\n                });\n                const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                    reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs }\n                });\n                const tx = {\n                    to: txSender,\n                    data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n                };\n                this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                try {\n                    const result = await this.#call(tx, blockTag, attempt + 1);\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({}, tx), result });\n                    return result;\n                }\n                catch (error) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({}, tx), error });\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    async #checkNetwork(promise) {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n    async call(_tx) {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n    }\n    // Account\n    async #getAccountValue(request, _address, _blockTag) {\n        let address = this._getAddress(_address);\n        let blockTag = this._getBlockTag(_blockTag);\n        if (typeof (address) !== \"string\" || typeof (blockTag) !== \"string\") {\n            [address, blockTag] = await Promise.all([address, blockTag]);\n        }\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n    async getBalance(address, blockTag) {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n    async getTransactionCount(address, blockTag) {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n    async getCode(address, blockTag) {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n    async getStorage(address, _position, blockTag) {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n    // Write\n    async broadcastTransaction(signedTx) {\n        const { blockNumber, hash, network } = await resolveProperties({\n            blockNumber: this.getBlockNumber(),\n            hash: this._perform({\n                method: \"broadcastTransaction\",\n                signedTransaction: signedTx\n            }),\n            network: this.getNetwork()\n        });\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n    }\n    async #getBlock(block, includeTransactions) {\n        // @TODO: Add CustomBlockPlugin check\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n        let blockTag = this._getBlockTag(block);\n        if (typeof (blockTag) !== \"string\") {\n            blockTag = await blockTag;\n        }\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n    // Queries\n    async getBlock(block, prefetchTxs) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapBlock(params, network);\n    }\n    async getTransaction(hash) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapTransactionResponse(params, network);\n    }\n    async getTransactionReceipt(hash) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) {\n            return null;\n        }\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) {\n                throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n        return this._wrapTransactionReceipt(params, network);\n    }\n    async getTransactionResult(hash) {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) {\n            return null;\n        }\n        return hexlify(result);\n    }\n    // Bloom-filter Queries\n    async getLogs(_filter) {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) {\n            filter = await filter;\n        }\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getLogs\", filter })\n        });\n        return params.map((p) => this._wrapLog(p, network));\n    }\n    // ENS\n    _getProvider(chainId) {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n    async getResolver(name) {\n        return await EnsResolver.fromName(this, name);\n    }\n    async getAvatar(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAvatar();\n        }\n        return null;\n    }\n    async resolveName(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAddress();\n        }\n        return null;\n    }\n    async lookupAddress(address) {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n        try {\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) {\n                return null;\n            }\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) {\n                return null;\n            }\n            return name;\n        }\n        catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) {\n                return null;\n            }\n            throw error;\n        }\n        return null;\n    }\n    async waitForTransaction(hash, _confirms, timeout) {\n        const confirms = (_confirms != null) ? _confirms : 1;\n        if (confirms === 0) {\n            return this.getTransactionReceipt(hash);\n        }\n        return new Promise(async (resolve, reject) => {\n            let timer = null;\n            const listener = (async (blockNumber) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                }\n                catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n            listener(await this.getBlockNumber());\n        });\n    }\n    async waitForBlock(blockTag) {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n    _clearTimeout(timerId) {\n        const timer = this.#timers.get(timerId);\n        if (!timer) {\n            return;\n        }\n        if (timer.timer) {\n            clearTimeout(timer.timer);\n        }\n        this.#timers.delete(timerId);\n    }\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n    _setTimeout(_func, timeout) {\n        if (timeout == null) {\n            timeout = 0;\n        }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        }\n        else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n        return timerId;\n    }\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n    _forEachSubscriber(func) {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n    _getSubscriber(sub) {\n        switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\":\n                return new PollingBlockSubscriber(this);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n        throw new Error(`unsupported event: ${sub.type}`);\n    }\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n    _recoverSubscriber(oldSub, newSub) {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) {\n                    sub.subscriber.stop();\n                }\n                sub.subscriber = newSub;\n                if (sub.started) {\n                    newSub.start();\n                }\n                if (this.#pausedState != null) {\n                    newSub.pause(this.#pausedState);\n                }\n                break;\n            }\n        }\n    }\n    async #hasSub(event, emitArgs) {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n    async #getSub(event) {\n        const subscription = await getSubscription(event, this);\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };\n            this.#subs.set(tag, sub);\n        }\n        return sub;\n    }\n    async on(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async once(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async emit(event, ...args) {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) {\n            return false;\n        }\n        ;\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null : listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            }\n            catch (error) { }\n            return !once;\n        });\n        if (sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return (count > 0);\n    }\n    async listenerCount(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n    async listeners(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result = [];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n    async off(event, listener) {\n        const sub = await this.#hasSub(event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return this;\n    }\n    async removeAllListeners(event) {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) {\n                subscriber.stop();\n            }\n            this.#subs.delete(tag);\n        }\n        else {\n            for (const [tag, { started, subscriber }] of this.#subs) {\n                if (started) {\n                    subscriber.stop();\n                }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    // Alias for \"on\"\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    // Alias for \"off\"\n    async removeListener(event, listener) {\n        return this.off(event, listener);\n    }\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n    get destroyed() {\n        return this.#destroyed;\n    }\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n    destroy() {\n        // Stop all listeners\n        this.removeAllListeners();\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n        this.#destroyed = true;\n    }\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n    get paused() { return (this.#pausedState != null); }\n    set paused(pause) {\n        if (!!pause === this.paused) {\n            return;\n        }\n        if (this.paused) {\n            this.resume();\n        }\n        else {\n            this.pause(false);\n        }\n    }\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n    pause(dropWhilePaused) {\n        this.#lastBlockNumber = -1;\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) {\n                return;\n            }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) {\n                clearTimeout(timer.timer);\n            }\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n    /**\n     *  Resume the provider.\n     */\n    resume() {\n        if (this.#pausedState == null) {\n            return;\n        }\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) {\n                timeout = 0;\n            }\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\nfunction _parseString(result, start) {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) {\n            return toUtf8String(bytes);\n        }\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    }\n    catch (error) { }\n    return null;\n}\nfunction numPad(value) {\n    const result = toBeArray(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return concat(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n    const result = {\n        sender: \"\", urls: [], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: []\n    };\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n    // Read the URLs from the response\n    try {\n        const urls = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n                throw new Error(\"abort\");\n            }\n            urls.push(url);\n        }\n        result.urls = urls;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) {\n            throw new Error(\"abort\");\n        }\n        result.calldata = calldata;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) {\n            throw new Error(\"abort\");\n        }\n        result.extraData = extraData;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => result[k]);\n    return result;\n}\n//# sourceMappingURL=abstract-provider.js.map","/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\nfunction checkProvider(signer, operation) {\n    if (signer.provider) {\n        return signer.provider;\n    }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\nasync function populate(signer, tx) {\n    let pop = copyRequest(tx);\n    if (pop.to != null) {\n        pop.to = resolveAddress(pop.to, signer);\n    }\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([address, from]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    }\n    else {\n        pop.from = signer.getAddress();\n    }\n    return await resolveProperties(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport class AbstractSigner {\n    /**\n     *  The provider this signer is connected to.\n     */\n    provider;\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider) {\n        defineProperties(this, { provider: (provider || null) });\n    }\n    async getNonce(blockTag) {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n    async populateCall(tx) {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n    async populateTransaction(tx) {\n        const provider = checkProvider(this, \"populateTransaction\");\n        const pop = await populate(this, tx);\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n        // Populate the chain ID\n        const network = await (this.provider).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        }\n        else {\n            pop.chainId = network.chainId;\n        }\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        }\n        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n        }\n        else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n            });\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n            }\n        }\n        else {\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n                    }\n                    else {\n                        // Populate missing fee data\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n                }\n                else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"populateTransaction\"\n                    });\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n                }\n                else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n            }\n            else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n        //@TOOD: Don't await all over the place; save them up for\n        // the end for better batching\n        return await resolveProperties(pop);\n    }\n    async estimateGas(tx) {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n    async call(tx) {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n    async resolveName(name) {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n    async sendTransaction(tx) {\n        const provider = checkProvider(this, \"sendTransaction\");\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n}\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    address;\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address, provider) {\n        super(provider);\n        defineProperties(this, { address });\n    }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    #throwUnsupported(suffix, operation) {\n        assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n    async signTransaction(tx) {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n    async signMessage(message) {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n    async signTypedData(domain, types, value) {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n//# sourceMappingURL=abstract-signer.js.map","import { isError } from \"../utils/index.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdSubscriber {\n    #provider;\n    #filterIdPromise;\n    #poller;\n    #running;\n    #network;\n    #hault;\n    /**\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n     *  and [[_emitResults]] to setup the subscription and provide the event\n     *  to the %%provider%%.\n     */\n    constructor(provider) {\n        this.#provider = provider;\n        this.#filterIdPromise = null;\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#network = null;\n        this.#hault = false;\n    }\n    /**\n     *  Sub-classes **must** override this to begin the subscription.\n     */\n    _subscribe(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle the events.\n     */\n    _emitResults(provider, result) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle recovery on errors.\n     */\n    _recover(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    async #poll(blockNumber) {\n        try {\n            // Subscribe if necessary\n            if (this.#filterIdPromise == null) {\n                this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n            // Get the Filter ID\n            let filterId = null;\n            try {\n                filterId = await this.#filterIdPromise;\n            }\n            catch (error) {\n                if (!isError(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                    throw error;\n                }\n            }\n            // The backend does not support Filter ID; downgrade to\n            // polling\n            if (filterId == null) {\n                this.#filterIdPromise = null;\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n                return;\n            }\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) {\n                this.#network = network;\n            }\n            if (this.#network.chainId !== network.chainId) {\n                throw new Error(\"chaid changed\");\n            }\n            if (this.#hault) {\n                return;\n            }\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [filterId]);\n            await this._emitResults(this.#provider, result);\n        }\n        catch (error) {\n            console.log(\"@TODO\", error);\n        }\n        this.#provider.once(\"block\", this.#poller);\n    }\n    #teardown() {\n        const filterIdPromise = this.#filterIdPromise;\n        if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId) => {\n                this.#provider.send(\"eth_uninstallFilter\", [filterId]);\n            });\n        }\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        this.#poll(-2);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#hault = true;\n        this.#teardown();\n        this.#provider.off(\"block\", this.#poller);\n    }\n    pause(dropWhilePaused) {\n        if (dropWhilePaused) {\n            this.#teardown();\n        }\n        this.#provider.off(\"block\", this.#poller);\n    }\n    resume() { this.start(); }\n}\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdEventSubscriber extends FilterIdSubscriber {\n    #event;\n    /**\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n     *  listening for %%filter%%.\n     */\n    constructor(provider, filter) {\n        super(provider);\n        this.#event = copy(filter);\n    }\n    _recover(provider) {\n        return new PollingEventSubscriber(provider, this.#event);\n    }\n    async _subscribe(provider) {\n        const filterId = await provider.send(\"eth_newFilter\", [this.#event]);\n        return filterId;\n    }\n    async _emitResults(provider, results) {\n        for (const result of results) {\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n        }\n    }\n}\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider) {\n        return await provider.send(\"eth_newPendingTransactionFilter\", []);\n    }\n    async _emitResults(provider, results) {\n        for (const result of results) {\n            provider.emit(\"pending\", result);\n        }\n    }\n}\n//# sourceMappingURL=subscriber-filterid.js.map","/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes, makeError, assert, assertArgument, FetchRequest, resolveProperties } from \"../utils/index.js\";\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n    if (value == null || Primitive.indexOf(typeof (value)) >= 0) {\n        return value;\n    }\n    // Keep any Addressable\n    if (typeof (value.getAddress) === \"function\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return (value.map(deepCopy));\n    }\n    if (typeof (value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = value[key];\n            return accum;\n        }, {});\n    }\n    throw new Error(`should not happen: ${value} (${typeof (value)})`);\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nfunction isPollable(value) {\n    return (value && typeof (value.pollingInterval) === \"number\");\n}\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n    batchStallTime: 10,\n    batchMaxSize: (1 << 20),\n    batchMaxCount: 100,\n    cacheTimeout: 250\n};\n// @TODO: Unchecked Signers\nexport class JsonRpcSigner extends AbstractSigner {\n    address;\n    constructor(provider, address) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties(this, { address });\n    }\n    connect(provider) {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n    async getAddress() {\n        return this.address;\n    }\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx) {\n        return await this.populateCall(tx);\n    }\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        const promises = [];\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        }\n        else {\n            tx.from = this.address;\n        }\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });\n            })());\n        }\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n        // Wait until all of our properties are filled in\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n    }\n    async sendTransaction(tx) {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [1000, 100];\n            const checkTx = async () => {\n                // Try getting the transaction\n                const tx = await this.provider.getTransaction(hash);\n                if (tx != null) {\n                    resolve(tx.replaceableTransaction(blockNumber));\n                    return;\n                }\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n    async signTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        }\n        else {\n            tx.from = this.address;\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n    }\n    async signMessage(_message) {\n        const message = ((typeof (_message) === \"string\") ? toUtf8Bytes(_message) : _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase()\n        ]);\n    }\n    async signTypedData(domain, types, _value) {\n        const value = deepCopy(_value);\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n    async unlock(password) {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null\n        ]);\n    }\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message) {\n        const message = ((typeof (_message) === \"string\") ? toUtf8Bytes(_message) : _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message)\n        ]);\n    }\n}\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport class JsonRpcApiProvider extends AbstractProvider {\n    #options;\n    // The next ID to use for the JSON-RPC ID field\n    #nextId;\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads;\n    #drainTimer;\n    #notReady;\n    #network;\n    #scheduleDrain() {\n        if (this.#drainTimer) {\n            return;\n        }\n        // If we aren't using batching, no hard in sending it immeidately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0 : this._getOption(\"batchStallTime\");\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n            const payloads = this.#payloads;\n            this.#payloads = [];\n            while (payloads.length) {\n                // Create payload batches that satisfy our batch constraints\n                const batch = [(payloads.shift())];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) {\n                        break;\n                    }\n                    batch.push((payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift((batch.pop()));\n                        break;\n                    }\n                }\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload : batch.map((p) => p.payload));\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n                    }\n                    catch (error) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n    constructor(network, options) {\n        const superOptions = {};\n        if (options && options.cacheTimeout != null) {\n            superOptions.cacheTimeout = options.cacheTimeout;\n        }\n        super(network, superOptions);\n        this.#nextId = 1;\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        this.#payloads = [];\n        this.#drainTimer = null;\n        this.#network = null;\n        {\n            let resolve = null;\n            const promise = new Promise((_resolve) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n        // Make sure any static network is compatbile with the provided netwrok\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (staticNetwork) {\n            assertArgument(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption(key) {\n        return this.#options[key];\n    }\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network() {\n        assert(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req) {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({}, req, {\n                            transaction: Object.assign({}, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n        const request = this.getRpcRequest(req);\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n        return super._perform(req);\n    }\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork() {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            return network;\n        }\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            return Network.from(getBigInt(await this.send(\"eth_chainId\", [])));\n        }\n        // We are not ready yet; use the primitive _send\n        const payload = {\n            id: this.#nextId++, method: \"eth_chainId\", params: [], jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n        let result;\n        try {\n            result = (await this._send(payload))[0];\n        }\n        catch (error) {\n            this.emit(\"debug\", { action: \"receiveRpcError\", error });\n            throw error;\n        }\n        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n        if (\"result\" in result) {\n            return Network.from(getBigInt(result.result));\n        }\n        throw this.getRpcError(payload, result);\n    }\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start() {\n        if (this.#notReady == null || this.#notReady.resolve == null) {\n            return;\n        }\n        this.#notReady.resolve();\n        this.#notReady = null;\n        (async () => {\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                }\n                catch (error) {\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady() {\n        if (this.#notReady == null) {\n            return;\n        }\n        return await this.#notReady.promise;\n    }\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub) {\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") {\n            return new FilterIdPendingSubscriber(this);\n        }\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready() { return this.#notReady == null; }\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx) {\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            let dstKey = key;\n            if (key === \"gasLimit\") {\n                dstKey = \"gas\";\n            }\n            result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));\n        });\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            result[key] = hexlify(tx[key]);\n        });\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n        return result;\n    }\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req) {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [] };\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [] };\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [req.signedTransaction]\n                };\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [req.blockTag, !!req.includeTransactions]\n                    };\n                }\n                else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [req.blockHash, !!req.includeTransactions]\n                    };\n                }\n                break;\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [req.hash]\n                };\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [req.hash]\n                };\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [this.getRpcTransaction(req.transaction), req.blockTag]\n                };\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [this.getRpcTransaction(req.transaction)]\n                };\n            }\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    }\n                    else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [req.filter] };\n        }\n        return null;\n    }\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload, _error) {\n        const { method } = payload;\n        const { error } = _error;\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: (payload.params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n            const e = AbiCoder.getBuiltinCallException((method === \"eth_call\") ? \"call\" : \"estimateGas\", (payload.params[0]), (result ? result.data : null));\n            e.info = { error, payload };\n            return e;\n        }\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n        const message = JSON.stringify(spelunkMessage(error));\n        if (typeof (error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\"),\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = (payload.params[0]);\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method, params) {\n        // @TODO: cache chainId?? purge on switch_networks\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n        return promise;\n    }\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accountsPromise = this.send(\"eth_accounts\", []);\n        // Account index\n        if (typeof (address) === \"number\") {\n            const accounts = (await accountsPromise);\n            if (address >= accounts.length) {\n                throw new Error(\"no such account\");\n            }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n        throw new Error(\"invalid account\");\n    }\n    async listAccounts() {\n        const accounts = await this.send(\"eth_accounts\", []);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n    destroy() {\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n        this.#payloads = [];\n        // Parent clean-up\n        super.destroy();\n    }\n}\nexport class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval;\n    constructor(network, options) {\n        super(network, options);\n        this.#pollingInterval = 4000;\n    }\n    _getSubscriber(sub) {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval() { return this.#pollingInterval; }\n    set pollingInterval(value) {\n        if (!Number.isInteger(value) || value < 0) {\n            throw new Error(\"invalid interval\");\n        }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect;\n    constructor(url, network, options) {\n        if (url == null) {\n            url = \"http:/\\/localhost:8545\";\n        }\n        super(network, options);\n        if (typeof (url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        }\n        else {\n            this.#connect = url.clone();\n        }\n    }\n    _getConnection() {\n        return this.#connect.clone();\n    }\n    async send(method, params) {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) {\n            resp = [resp];\n        }\n        return resp;\n    }\n}\nfunction spelunkData(value) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction _spelunkMessage(value, result) {\n    if (value == null) {\n        return;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\") {\n        result.push(value.message);\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        }\n        catch (error) { }\n    }\n}\nfunction spelunkMessage(value) {\n    const result = [];\n    _spelunkMessage(value, result);\n    return result;\n}\n//# sourceMappingURL=provider-jsonrpc.js.map","/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider {\n    /**\n     *  The API key for the Ankr connection.\n     */\n    apiKey;\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    getRpcError(payload, error) {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n        return super.getRpcError(payload, error);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=provider-ankr.js.map","/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider {\n    apiKey;\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            }\n            catch (error) { }\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-alchemy.js.map","/**\n *  About Cloudflare\n *\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\n */\nimport { assertArgument } from \"../utils/index.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n/**\n *  About Cloudflare...\n */\nexport class CloudflareProvider extends JsonRpcProvider {\n    constructor(_network) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        assertArgument(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\n        super(\"https:/\\/cloudflare-eth.com/\", network, { staticNetwork: network });\n    }\n}\n//# sourceMappingURL=provider-cloudflare.js.map","/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, hexlify, toQuantity, FetchRequest, assert, assertArgument, isError, toUtf8String } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\nconst THROTTLE = 2000;\nfunction isPromise(value) {\n    return (value && typeof (value.then) === \"function\");\n}\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    baseUrl;\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl) {\n        super(EtherscanPluginId);\n        defineProperties(this, { baseUrl });\n    }\n    clone() {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\nconst skipKeys = [\"enableCcipRead\"];\nlet nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n    /**\n     *  The connected network.\n     */\n    network;\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    apiKey;\n    #plugin;\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network, _apiKey) {\n        const apiKey = (_apiKey != null) ? _apiKey : null;\n        super();\n        const network = Network.from(_network);\n        this.#plugin = network.getPlugin(EtherscanPluginId);\n        defineProperties(this, { apiKey, network });\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */\n    getBaseUrl() {\n        if (this.#plugin) {\n            return this.#plugin.baseUrl;\n        }\n        switch (this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;\n    }\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl() {\n        return `${this.getBaseUrl()}/api`;\n    }\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    async detectNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module, params, post) {\n        const id = nextId++;\n        const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params) : null);\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};\n            const throttle = ((typeof (result.result) === \"string\") ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join(\"&\");\n        }\n        const response = await request.send();\n        try {\n            response.assertOk();\n        }\n        catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n            return result.result;\n        }\n        else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n            if (result.status != 1 || (typeof (result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n            return result.result;\n        }\n    }\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction) {\n        const result = {};\n        for (let key in transaction) {\n            if (skipKeys.indexOf(key) >= 0) {\n                continue;\n            }\n            if (transaction[key] == null) {\n                continue;\n            }\n            let value = transaction[key];\n            if (key === \"type\" && value === 0) {\n                continue;\n            }\n            // Quantity-types require no leading zero, unless 0\n            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n                value = toQuantity(value);\n            }\n            else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n                }).join(\",\") + \"]\";\n            }\n            else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req, error, transaction) {\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = error.info.result.error.message;\n            }\n            catch (e) { }\n            if (!message) {\n                try {\n                    message = error.info.message;\n                }\n                catch (e) { }\n            }\n        }\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = error.info.result.error.data;\n                }\n                catch (error) { }\n                const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n                e.info = { request: req, error };\n                throw e;\n            }\n        }\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                        transaction\n                    });\n                }\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                        transaction\n                    });\n                }\n            }\n        }\n        // Something we could not process\n        throw error;\n    }\n    async _detectNetwork() {\n        return this.network;\n    }\n    async _perform(req) {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, error, req.signedTransaction);\n                });\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\" : \"false\")\n                    });\n                }\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                }\n                catch (error) {\n                    return this._checkError(req, error, req.transaction);\n                }\n            }\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                }\n                catch (error) {\n                    return this._checkError(req, error, req.transaction);\n                }\n            }\n            /*\n                        case \"getLogs\": {\n                            // Needs to complain if more than one address is passed in\n                            const args: Record<string, any> = { action: \"getLogs\" }\n            \n                            if (params.filter.fromBlock) {\n                                args.fromBlock = checkLogTag(params.filter.fromBlock);\n                            }\n            \n                            if (params.filter.toBlock) {\n                                args.toBlock = checkLogTag(params.filter.toBlock);\n                            }\n            \n                            if (params.filter.address) {\n                                args.address = params.filter.address;\n                            }\n            \n                            // @TODO: We can handle slightly more complicated logs using the logs API\n                            if (params.filter.topics && params.filter.topics.length > 0) {\n                                if (params.filter.topics.length > 1) {\n                                    logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                                }\n                                if (params.filter.topics.length === 1) {\n                                    const topic0 = params.filter.topics[0];\n                                    if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                        logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                                    }\n                                    args.topic0 = topic0;\n                                }\n                            }\n            \n                            const logs: Array<any> = await this.fetch(\"logs\", args);\n            \n                            // Cache txHash => blockHash\n                            let blocks: { [tag: string]: string } = {};\n            \n                            // Add any missing blockHash to the logs\n                            for (let i = 0; i < logs.length; i++) {\n                                const log = logs[i];\n                                if (log.blockHash != null) { continue; }\n                                if (blocks[log.blockNumber] == null) {\n                                    const block = await this.getBlock(log.blockNumber);\n                                    if (block) {\n                                        blocks[log.blockNumber] = block.hash;\n                                    }\n                                }\n            \n                                log.blockHash = blocks[log.blockNumber];\n                            }\n            \n                            return logs;\n                        }\n            */\n            default:\n                break;\n        }\n        return super._perform(req);\n    }\n    async getNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice() {\n        if (this.network.name !== \"mainnet\") {\n            return 0.0;\n        }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address) {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) {\n            address = await address;\n        }\n        try {\n            const resp = await this.fetch(\"contract\", {\n                action: \"getabi\", address\n            });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    isCommunityResource() {\n        return (this.apiKey == null);\n    }\n}\n//# sourceMappingURL=provider-etherscan.js.map","function getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst _WebSocket = getGlobal().WebSocket;\nexport { _WebSocket as WebSocket };\n//# sourceMappingURL=ws-browser.js.map","/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber {\n    #provider;\n    #filter;\n    /**\n     *  The filter.\n     */\n    get filter() { return JSON.parse(this.#filter); }\n    #filterId;\n    #paused;\n    #emitPromise;\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider, filter) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n    start() {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {\n            ;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n    stop() {\n        (this.#filterId).then((filterId) => {\n            this.#provider.send(\"eth_unsubscribe\", [filterId]);\n        });\n        this.#filterId = null;\n    }\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused) {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n    resume() {\n        this.#paused = null;\n    }\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message) {\n        if (this.#filterId == null) {\n            return;\n        }\n        if (this.#paused === null) {\n            let emitPromise = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            }\n            else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider, message) {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newHeads\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newPendingTransactions\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"pending\", message);\n    }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter;\n    /**\n     *  The filter.\n     */\n    get logFilter() { return JSON.parse(this.#logFilter); }\n    /**\n     *  @_ignore:\n     */\n    constructor(provider, filter) {\n        super(provider, [\"logs\", filter]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n    async _emit(provider, message) {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks;\n    // Maps each filterId to its subscriber\n    #subs;\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending;\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network) {\n        super(network, { batchMaxCount: 1 });\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n    _getSubscriber(sub) {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId, subscriber) {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n    async _send(payload) {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n        // @TODO: stringify payloads here and store to prevent mutations\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n        return [await promise];\n    }\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message) {\n        const result = (JSON.parse(message));\n        if (result && typeof (result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n            callback.resolve(result);\n        }\n        else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            }\n            else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        }\n        else {\n            this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message) {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n//# sourceMappingURL=provider-socket.js.map","import { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\nimport { SocketProvider } from \"./provider-socket.js\";\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n    #connect;\n    #websocket;\n    get websocket() {\n        if (this.#websocket == null) {\n            throw new Error(\"websocket closed\");\n        }\n        return this.#websocket;\n    }\n    constructor(url, network) {\n        super(network);\n        if (typeof (url) === \"string\") {\n            this.#connect = () => { return new _WebSocket(url); };\n            this.#websocket = this.#connect();\n        }\n        else if (typeof (url) === \"function\") {\n            this.#connect = url;\n            this.#websocket = url();\n        }\n        else {\n            this.#connect = null;\n            this.#websocket = url;\n        }\n        this.websocket.onopen = async () => {\n            try {\n                await this._start();\n                this.resume();\n            }\n            catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n                // @TODO: now what? Attempt reconnect?\n            }\n        };\n        this.websocket.onmessage = (message) => {\n            this._processMessage(message.data);\n        };\n        /*\n                this.websocket.onclose = (event) => {\n                    // @TODO: What event.code should we reconnect on?\n                    const reconnect = false;\n                    if (reconnect) {\n                        this.pause(true);\n                        if (this.#connect) {\n                            this.#websocket = this.#connect();\n                            this.#websocket.onopen = ...\n                            // @TODO: this requires the super class to rebroadcast; move it there\n                        }\n                        this._reconnect();\n                    }\n                };\n        */\n    }\n    async _write(message) {\n        this.websocket.send(message);\n    }\n    async destroy() {\n        if (this.#websocket != null) {\n            this.#websocket.close();\n            this.#websocket = null;\n        }\n        super.destroy();\n    }\n}\n//# sourceMappingURL=provider-websocket.js.map","/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport { defineProperties, FetchRequest, assert, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    projectId;\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    projectSecret;\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    constructor(network, projectId) {\n        const provider = new InfuraProvider(network, projectId);\n        const req = provider._getConnection();\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineProperties(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    projectId;\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    projectSecret;\n    /**\n     *  Creates a new **InfuraProvider**.\n     */\n    constructor(_network, projectId, projectSecret) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { projectId, projectSecret });\n    }\n    _getProvider(chainId) {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    static getWebSocketProvider(network, projectId) {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n    static getRequest(network, projectId, projectSecret) {\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n        request.allowGzip = true;\n        if (projectSecret) {\n            request.setCredentials(\"\", projectSecret);\n        }\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"InfuraProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-infura.js.map","/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        //case \"sepolia\":\n        //    return \"sepolia.infura.io\";\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nexport class QuickNodeProvider extends JsonRpcProvider {\n    /**\n     *  The API token.\n     */\n    token;\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */\n    constructor(_network, token) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { token });\n    }\n    _getProvider(chainId) {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return (this.token === defaultToken);\n    }\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */\n    static getRequest(network, token) {\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-quicknode.js.map","/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { getBigInt, getNumber, assert, assertArgument } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\nfunction getTime() { return (new Date()).getTime(); }\nfunction stringify(value) {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof (value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n;\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                }\n                catch (error) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) {\n            break;\n        }\n    }\n}\nfunction _normalize(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n        case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\n        }\n    }\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n    const tally = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n    let best = null;\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n    if (best) {\n        return best.value;\n    }\n    return undefined;\n}\nfunction getMedian(quorum, results) {\n    let resultWeight = 0;\n    const errorMap = new Map();\n    let bestError = null;\n    const values = [];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n            if (bestError == null || e.weight > bestError.weight) {\n                bestError = e;\n            }\n        }\n        else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) {\n            return bestError.value;\n        }\n        // We do not have quorum for a result\n        return undefined;\n    }\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1 : (b > a) ? 1 : 0));\n    const mid = Math.floor(values.length / 2);\n    // Odd-length; take the middle value\n    if (values.length % 2) {\n        return values[mid];\n    }\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) {\n        return result;\n    }\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) {\n            return r.value;\n        }\n    }\n    // Nope!\n    return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n    if (quorum === 1) {\n        return getNumber(getMedian(quorum, results), \"%internal\");\n    }\n    const tally = new Map();\n    const add = (result, weight) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n    let bestWeight = 0;\n    let bestResult = undefined;\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n    return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    quorum;\n    /**\n     *  @_ignore:\n     */\n    eventQuorum;\n    /**\n     *  @_ignore:\n     */\n    eventWorkers;\n    #configs;\n    #height;\n    #initialSyncPromise;\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers, network) {\n        super(network);\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState);\n            }\n            else {\n                return Object.assign({}, defaultConfig, p, defaultState);\n            }\n        });\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n        this.quorum = 2; //Math.ceil(providers.length /  2);\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n    get providerConfigs() {\n        return this.#configs.map((c) => {\n            const result = Object.assign({}, c);\n            for (const key in result) {\n                if (key[0] === \"_\") {\n                    delete result[key];\n                }\n            }\n            return result;\n        });\n    }\n    async _detectNetwork() {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider, req) {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash : req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running) {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n        const configs = Array.from(running).map((r) => r.config);\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (b.priority - a.priority));\n        for (const config of allConfigs) {\n            if (config._lastFatalError) {\n                continue;\n            }\n            if (configs.indexOf(config) === -1) {\n                return config;\n            }\n        }\n        return null;\n    }\n    // Adds a new runner (if available) to running.\n    #addRunner(running, req) {\n        const config = this.#getNextConfig(running);\n        // No runners available\n        if (config == null) {\n            return null;\n        }\n        // Create a new runner\n        const runner = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n        const now = getTime();\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            }\n            catch (error) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n            runner.perform = null;\n        })();\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n        running.add(runner);\n        return runner;\n    }\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync() {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises = [];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n                // Check all the networks match\n                let chainId = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) {\n                        continue;\n                    }\n                    const network = (config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    }\n                    else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n        await initialSync;\n    }\n    async #checkQuorum(running, req) {\n        // Get all the result objects\n        const results = [];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) {\n                    return undefined;\n                }\n                if (mode > this.#height) {\n                    this.#height = mode;\n                }\n                return this.#height;\n            }\n            case \"getGasPrice\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${stringify(req.method)})`\n        });\n    }\n    async #waitForQuorum(running, req) {\n        if (running.size === 0) {\n            throw new Error(\"no runners?!\");\n        }\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting = [];\n        let newRunners = 0;\n        for (const runner of running) {\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n            // This runner has already triggered another runner\n            if (runner.didBump) {\n                continue;\n            }\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) {\n                throw value;\n            }\n            return value;\n        }\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req);\n        }\n        // All providers have returned, and we have no result\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n    async _perform(req) {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            const results = await Promise.all(this.#configs.map(async ({ provider, weight }) => {\n                try {\n                    const result = await provider._perform(req);\n                    return Object.assign(normalizeResult({ result }), { weight });\n                }\n                catch (error) {\n                    return Object.assign(normalizeResult({ error }), { weight });\n                }\n            }));\n            const result = getAnyResult(this.quorum, results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            });\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        await this.#initialSync();\n        // Bootstrap enough runners to meet quorum\n        const running = new Set();\n        for (let i = 0; i < this.quorum; i++) {\n            this.#addRunner(running, req);\n        }\n        const result = await this.#waitForQuorum(running, req);\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n        return result;\n    }\n    async destroy() {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n//# sourceMappingURL=provider-fallback.js.map","import { assert } from \"../utils/index.js\";\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nfunction isWebSocketLike(value) {\n    return (value && typeof (value.send) === \"function\" &&\n        typeof (value.close) === \"function\");\n}\nexport function getDefaultProvider(network, options) {\n    if (options == null) {\n        options = {};\n    }\n    if (typeof (network) === \"string\" && network.match(/^https?:/)) {\n        return new JsonRpcProvider(network);\n    }\n    if (typeof (network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new WebSocketProvider(network);\n    }\n    const providers = [];\n    if (options.alchemy !== \"-\") {\n        try {\n            providers.push(new AlchemyProvider(network, options.alchemy));\n        }\n        catch (error) { }\n    }\n    if (options.ankr !== \"-\" && options.ankr != null) {\n        try {\n            providers.push(new AnkrProvider(network, options.ankr));\n        }\n        catch (error) { }\n    }\n    if (options.cloudflare !== \"-\") {\n        try {\n            providers.push(new CloudflareProvider(network));\n        }\n        catch (error) { }\n    }\n    if (options.etherscan !== \"-\") {\n        try {\n            providers.push(new EtherscanProvider(network, options.etherscan));\n        }\n        catch (error) { }\n    }\n    if (options.infura !== \"-\") {\n        try {\n            let projectId = options.infura;\n            let projectSecret = undefined;\n            if (typeof (projectId) === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new InfuraProvider(network, projectId, projectSecret));\n        }\n        catch (error) { }\n    }\n    /*\n        if (options.pocket !== \"-\") {\n            try {\n                let appId = options.pocket;\n                let secretKey: undefined | string = undefined;\n                let loadBalancer: undefined | boolean = undefined;\n                if (typeof(appId) === \"object\") {\n                    loadBalancer = !!appId.loadBalancer;\n                    secretKey = appId.secretKey;\n                    appId = appId.appId;\n                }\n                providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n            } catch (error) { console.log(error); }\n        }\n    */\n    if (options.quicknode !== \"-\") {\n        try {\n            let token = options.quicknode;\n            providers.push(new QuickNodeProvider(network, token));\n        }\n        catch (error) { }\n    }\n    assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n    if (providers.length === 1) {\n        return providers[0];\n    }\n    return new FallbackProvider(providers);\n}\n//# sourceMappingURL=default-provider.js.map","import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer;\n    #noncePromise;\n    #delta;\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer) {\n        super(signer.provider);\n        defineProperties(this, { signer });\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n    async getAddress() {\n        return this.signer.getAddress();\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    async getNonce(blockTag) {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n        return super.getNonce(blockTag);\n    }\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment() {\n        this.#delta++;\n    }\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset() {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n    async sendTransaction(tx) {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n    signTransaction(tx) {\n        return this.signer.signTransaction(tx);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n    signTypedData(domain, types, value) {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n//# sourceMappingURL=signer-noncemanager.js.map","import { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n    #request;\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */\n    constructor(ethereum, network) {\n        super(network, { batchMaxCount: 1 });\n        this.#request = async (method, params) => {\n            const payload = { method, params };\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\n                return result;\n            }\n            catch (e) {\n                const error = new Error(e.message);\n                error.code = e.code;\n                error.data = e.data;\n                error.payload = payload;\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\n                throw error;\n            }\n        };\n    }\n    async send(method, params) {\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n        try {\n            const result = await this.#request(payload.method, payload.params || []);\n            return [{ id: payload.id, result }];\n        }\n        catch (e) {\n            return [{\n                    id: payload.id,\n                    error: { code: e.code, data: e.data, message: e.message }\n                }];\n        }\n    }\n    getRpcError(payload, error) {\n        error = JSON.parse(JSON.stringify(error));\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch (error.error.code || -1) {\n            case 4001:\n                error.error.message = `ethers-user-denied: ${error.error.message}`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${error.error.message}`;\n                break;\n        }\n        return super.getRpcError(payload, error);\n    }\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */\n    async hasSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accounts = await this.send(\"eth_accounts\", []);\n        if (typeof (address) === \"number\") {\n            return (accounts.length > address);\n        }\n        address = address.toLowerCase();\n        return accounts.filter((a) => (a.toLowerCase() === address)).length !== 0;\n    }\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        if (!(await this.hasSigner(address))) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", []);\n                //console.log(\"RESP\", resp);\n            }\n            catch (error) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, { id: payload.id, error });\n            }\n        }\n        return await super.getSigner(address);\n    }\n}\n//# sourceMappingURL=provider-browser.js.map","/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider {\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    applicationId;\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    applicationSecret;\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network, applicationId, applicationSecret) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        if (applicationSecret == null) {\n            applicationSecret = null;\n        }\n        const options = { staticNetwork: network };\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n        defineProperties(this, { applicationId, applicationSecret });\n    }\n    _getProvider(chainId) {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network, applicationId, applicationSecret) {\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n        request.allowGzip = true;\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n//# sourceMappingURL=provider-pocket.js.map","const IpcSocketProvider = undefined;\nexport { IpcSocketProvider };\n//# sourceMappingURL=provider-ipcsocket-browser.js.map","/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport { getBigInt, getNumber, fromTwos, mask, toBigInt } from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n    Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n    let result = Zeros;\n    while (result.length < decimals) {\n        result += result;\n    }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = (BN_1 << (width - BN_1));\n        assert(safeOp == null || (val >= -limit && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        if (val > BN_0) {\n            val = fromTwos(mask(val, width), width);\n        }\n        else {\n            val = -fromTwos(mask(-val, width), width);\n        }\n    }\n    else {\n        const limit = (BN_1 << width);\n        assert(safeOp == null || (val >= 0 && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        val = (((val % limit) + limit) % limit) & (limit - BN_1);\n    }\n    return val;\n}\nfunction getFormat(value) {\n    if (typeof (value) === \"number\") {\n        value = `fixed128x${value}`;\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof (value) === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n            // defaults...\n        }\n        else if (value === \"ufixed\") {\n            signed = false;\n        }\n        else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            assertArgument(match, \"invalid fixed format\", \"format\", value);\n            signed = (match[1] !== \"u\");\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    }\n    else if (value) {\n        // Extract the values from the object\n        const v = value;\n        const check = (key, type, defaultValue) => {\n            if (v[key] == null) {\n                return defaultValue;\n            }\n            assertArgument(typeof (v[key]) === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n            return v[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n    assertArgument((width % 8) === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    return { signed, width, decimals, name };\n}\nfunction toString(val, decimals) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n    let str = val.toString();\n    // No decimal point for whole values\n    if (decimals === 0) {\n        return (negative + str);\n    }\n    // Pad out to the whole component (including a whole digit)\n    while (str.length <= decimals) {\n        str = Zeros + str;\n    }\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n    // Trim the whole component (leaving at least one 0)\n    while (str[0] === \"0\" && str[1] !== \".\") {\n        str = str.substring(1);\n    }\n    // Trim the decimal component (leaving at least one 0)\n    while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n        str = str.substring(0, str.length - 1);\n    }\n    return (negative + str);\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nexport class FixedNumber {\n    /**\n     *  The specific fixed-point arithmetic field for this value.\n     */\n    format;\n    #format;\n    // The actual value (accounting for decimals)\n    #val;\n    // A base-10 value to multiple values by to maintain the magnitude\n    #tens;\n    /**\n     *  This is a property so console.log shows a human-meaningful value.\n     *\n     *  @private\n     */\n    _value;\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n    /**\n     *  @private\n     */\n    constructor(guard, value, format) {\n        assertPrivate(guard, _guard, \"FixedNumber\");\n        this.#val = value;\n        this.#format = format;\n        const _value = toString(value, format.decimals);\n        defineProperties(this, { format: format.name, _value });\n        this.#tens = getTens(format.decimals);\n    }\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */\n    get signed() { return this.#format.signed; }\n    /**\n     *  The number of bits available to store the value.\n     */\n    get width() { return this.#format.width; }\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */\n    get decimals() { return this.#format.decimals; }\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */\n    get value() { return this.#val; }\n    #checkFormat(other) {\n        assertArgument(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n    #checkValue(val, safeOp) {\n        /*\n                const width = BigInt(this.width);\n                if (this.signed) {\n                    const limit = (BN_1 << (width - BN_1));\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n        \n                    if (val > BN_0) {\n                        val = fromTwos(mask(val, width), width);\n                    } else {\n                        val = -fromTwos(mask(-val, width), width);\n                    }\n        \n                } else {\n                    const masked = mask(val, width);\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n                    val = masked;\n                }\n        */\n        val = checkValue(val, this.#format, safeOp);\n        return new FixedNumber(_guard, val, this.#format);\n    }\n    #add(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val + o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */\n    addUnsafe(other) { return this.#add(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    add(other) { return this.#add(other, \"add\"); }\n    #sub(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val - o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */\n    subUnsafe(other) { return this.#sub(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    sub(other) { return this.#sub(other, \"sub\"); }\n    #mul(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */\n    mulUnsafe(other) { return this.#mul(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    mul(other) { return this.#mul(other, \"mul\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */\n    mulSignal(other) {\n        this.#checkFormat(other);\n        const value = this.#val * other.#val;\n        assert((value % this.#tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\n    }\n    #div(o, safeOp) {\n        assert(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    divUnsafe(other) { return this.#div(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    div(other) { return this.#div(other, \"div\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */\n    divSignal(other) {\n        assert(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(other);\n        const value = (this.#val * this.#tens);\n        assert((value % other.#val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / other.#val, \"divSignal\");\n    }\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */\n    cmp(other) {\n        let a = this.value, b = other.value;\n        // Coerce a and b to the same magnitude\n        const delta = this.decimals - other.decimals;\n        if (delta > 0) {\n            b *= getTens(delta);\n        }\n        else if (delta < 0) {\n            a *= getTens(-delta);\n        }\n        // Comnpare\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */\n    eq(other) { return this.cmp(other) === 0; }\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */\n    lt(other) { return this.cmp(other) < 0; }\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */\n    lte(other) { return this.cmp(other) <= 0; }\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */\n    gt(other) { return this.cmp(other) > 0; }\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */\n    gte(other) { return this.cmp(other) >= 0; }\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    floor() {\n        let val = this.#val;\n        if (this.#val < BN_0) {\n            val -= this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"floor\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    ceiling() {\n        let val = this.#val;\n        if (this.#val > BN_0) {\n            val += this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"ceiling\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) {\n            return this;\n        }\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = (value / tens) * tens;\n        checkValue(value, this.#format, \"round\");\n        return new FixedNumber(_guard, value, this.#format);\n    }\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */\n    isZero() { return (this.#val === BN_0); }\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */\n    isNegative() { return (this.#val < BN_0); }\n    /**\n     *  Returns the string representation of %%this%%.\n     */\n    toString() { return this._value; }\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */\n    toFormat(format) {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */\n    static fromValue(_value, _decimals, _format) {\n        const decimals = (_decimals == null) ? 0 : getNumber(_decimals);\n        const format = getFormat(_format);\n        let value = getBigInt(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            assert((value % tens) === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\", fault: \"underflow\", value: _value\n            });\n            value /= tens;\n        }\n        else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n        checkValue(value, format, \"fromValue\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */\n    static fromString(_value, _format) {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        assertArgument(match && (match[2].length + match[3].length) > 0, \"invalid FixedNumber string value\", \"value\", _value);\n        const format = getFormat(_format);\n        let whole = (match[2] || \"0\"), decimal = (match[3] || \"\");\n        // Pad out the decimals\n        while (decimal.length < format.decimals) {\n            decimal += Zeros;\n        }\n        // Check precision is safe\n        assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\", fault: \"underflow\", value: _value\n        });\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n        const value = BigInt(match[1] + whole + decimal);\n        checkValue(value, format, \"fromString\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */\n    static fromBytes(_value, _format) {\n        let value = toBigInt(getBytes(_value, \"value\"));\n        const format = getFormat(_format);\n        if (format.signed) {\n            value = fromTwos(value, format.width);\n        }\n        checkValue(value, format, \"fromBytes\");\n        return new FixedNumber(_guard, value, format);\n    }\n}\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nexport function formatUnits(value, unit) {\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();\n}\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nexport function parseUnits(value, unit) {\n    assertArgument(typeof (value) === \"string\", \"value must be a string\", \"value\", value);\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromString(value, { decimals, width: 512 }).value;\n}\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=units.js.map","/**\n *  Explain UUID and link to RFC here.\n *\n *  @_subsection: api/utils:UUID  [about-uuid]\n */\nimport { getBytes, hexlify } from \"./data.js\";\n/**\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\n *\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n */\nexport function uuidV4(randomBytes) {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    const value = hexlify(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\n//# sourceMappingURL=uuid.js.map","import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word) => {\n        if (word === sep) {\n            initial++;\n        }\n        else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        }\n        else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n        if (semi) {\n            for (let i = parseInt(semi); i >= 0; i--) {\n                clumps.push(\";\");\n            }\n        }\n        else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */\n    if (leftover) {\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n    }\n    /* c8 ignore stop */\n    return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\n//# sourceMappingURL=decode-owl.js.map","import { defineProperties } from \"../utils/index.js\";\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */\nexport class Wordlist {\n    locale;\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */\n    constructor(locale) {\n        defineProperties(this, { locale });\n    }\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */\n    split(phrase) {\n        return phrase.toLowerCase().split(/\\s+/g);\n    }\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */\n    join(words) {\n        return words.join(\" \");\n    }\n}\n//# sourceMappingURL=wordlist.js.map","// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data;\n    #checksum;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale, data, checksum) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n    /**\n     *  The OWL-encoded data.\n     */\n    get _data() { return this.#data; }\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords() {\n        return decodeOwl(this.#data);\n    }\n    #words;\n    #loadWords() {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n            }\n            /* c8 ignore stop */\n            this.#words = words;\n        }\n        return this.#words;\n    }\n    getWord(index) {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return this.#loadWords().indexOf(word);\n    }\n}\n//# sourceMappingURL=wordlist-owl.js.map","import { WordlistOwl } from \"./wordlist-owl.js\";\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */\nexport class LangEn extends WordlistOwl {\n    /**\n     *  Creates a new instance of the English language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEn]] should suffice.\n     *\n     *  @_ignore:\n     */\n    constructor() { super(\"en\", words, checksum); }\n    /**\n     *  Returns a singleton instance of a ``LangEn``, creating it\n     *  if this is the first time being called.\n     */\n    static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangEn();\n        }\n        return wordlist;\n    }\n}\n//# sourceMappingURL=lang-en.js.map","import { pbkdf2, sha256 } from \"../crypto/index.js\";\nimport { defineProperties, getBytes, hexlify, assertNormalize, assertPrivate, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits) & 0xff;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return ((1 << bits) - 1) & 0xff;\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    assertNormalize(\"NFKD\");\n    if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n    }\n    const words = wordlist.split(mnemonic);\n    assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n    if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nconst _guard = {};\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */\nexport class Mnemonic {\n    /**\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\n     *\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\n     */\n    phrase;\n    /**\n     *  The password used for this mnemonic. If no password is used this\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\n     */\n    password;\n    /**\n     *  The wordlist for this mnemonic.\n     */\n    wordlist;\n    /**\n     *  The underlying entropy which the mnemonic encodes.\n     */\n    entropy;\n    /**\n     *  @private\n     */\n    constructor(guard, entropy, phrase, password, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        assertPrivate(guard, _guard, \"Mnemonic\");\n        defineProperties(this, { phrase, password, wordlist, entropy });\n    }\n    /**\n     *  Returns the seed for the mnemonic.\n     */\n    computeSeed() {\n        const salt = toUtf8Bytes(\"mnemonic\" + this.password, \"NFKD\");\n        return pbkdf2(toUtf8Bytes(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromPhrase(phrase, password, wordlist) {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic(getBytes(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromEntropy(_entropy, password, wordlist) {\n        const entropy = getBytes(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, hexlify(entropy), phrase, password, wordlist);\n    }\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */\n    static entropyToPhrase(_entropy, wordlist) {\n        const entropy = getBytes(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */\n    static phraseToEntropy(phrase, wordlist) {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */\n    static isValidMnemonic(phrase, wordlist) {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        }\n        catch (error) { }\n        return false;\n    }\n}\n//# sourceMappingURL=mnemonic.js.map","import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    address;\n    #signingKey;\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey, provider) {\n        super(provider);\n        assertArgument(privateKey && typeof (privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n        this.#signingKey = privateKey;\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties(this, { address });\n    }\n    // Store private values behind getters to reduce visibility\n    // in console.log\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey() { return this.#signingKey; }\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey() { return this.signingKey.privateKey; }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n    async signTransaction(tx) {\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this.provider) : undefined),\n            from: (tx.from ? resolveAddress(tx.from, this.provider) : undefined)\n        });\n        if (to != null) {\n            tx.to = to;\n        }\n        if (from != null) {\n            tx.from = from;\n        }\n        if (tx.from != null) {\n            assertArgument(getAddress((tx.from)) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n        // Build the transaction\n        const btx = Transaction.from(tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n        return btx.serialized;\n    }\n    async signMessage(message) {\n        return this.signMessageSync(message);\n    }\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message) {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n    async signTypedData(domain, types, value) {\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n            return address;\n        });\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n//# sourceMappingURL=base-wallet.js.map","/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _AES_key, _AES_Kd, _AES_Ke;\n// Number of rounds by keysize\nconst numberOfRounds = { 16: 10, 24: 12, 32: 14 };\n// Round constant words\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n// S-box and Inverse S-box (S is for Substitution)\nconst S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\nconst Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n// Transformations for encryption\nconst T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\nconst T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\nconst T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\nconst T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n// Transformations for decryption\nconst T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\nconst T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\nconst T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\nconst T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n// Transformations for decryption key expansion\nconst U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\nconst U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\nconst U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\nconst U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\nfunction convertToInt32(bytes) {\n    const result = [];\n    for (let i = 0; i < bytes.length; i += 4) {\n        result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);\n    }\n    return result;\n}\nexport class AES {\n    get key() { return __classPrivateFieldGet(this, _AES_key, \"f\").slice(); }\n    constructor(key) {\n        _AES_key.set(this, void 0);\n        _AES_Kd.set(this, void 0);\n        _AES_Ke.set(this, void 0);\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\n        const rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n        // encryption round keys\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\n        // decryption round keys\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\n        for (let i = 0; i <= rounds; i++) {\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([0, 0, 0, 0]);\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([0, 0, 0, 0]);\n        }\n        const roundKeyCount = (rounds + 1) * 4;\n        const KC = this.key.length / 4;\n        // convert the key into ints\n        const tk = convertToInt32(this.key);\n        // copy values into round key arrays\n        let index;\n        for (let i = 0; i < KC; i++) {\n            index = i >> 2;\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\n        }\n        // key expansion (fips-197 section 5.2)\n        let rconpointer = 0;\n        let t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                (S[(tt >> 8) & 0xFF] << 16) ^\n                (S[tt & 0xFF] << 8) ^\n                S[(tt >> 24) & 0xFF] ^\n                (rcon[rconpointer] << 24));\n            rconpointer += 1;\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (let i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            }\n            else {\n                for (let i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n                tk[KC / 2] ^= (S[tt & 0xFF] ^\n                    (S[(tt >> 8) & 0xFF] << 8) ^\n                    (S[(tt >> 16) & 0xFF] << 16) ^\n                    (S[(tt >> 24) & 0xFF] << 24));\n                for (let i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n            // copy values into round key arrays\n            let i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (let r = 1; r < rounds; r++) {\n            for (let c = 0; c < 4; c++) {\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                    U2[(tt >> 16) & 0xFF] ^\n                    U3[(tt >> 8) & 0xFF] ^\n                    U4[tt & 0xFF]);\n            }\n        }\n    }\n    encrypt(plaintext) {\n        if (plaintext.length != 16) {\n            throw new TypeError('invalid plaintext size (must be 16 bytes)');\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\n        const a = [0, 0, 0, 0];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(plaintext);\n        for (let i = 0; i < 4; i++) {\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\n        }\n        // apply round transforms\n        for (let r = 1; r < rounds; r++) {\n            for (let i = 0; i < 4; i++) {\n                a[i] = (T1[(t[i] >> 24) & 0xff] ^\n                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                    T3[(t[(i + 2) % 4] >> 8) & 0xff] ^\n                    T4[t[(i + 3) % 4] & 0xff] ^\n                    __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i]);\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for (let i = 0; i < 4; i++) {\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\n            result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new TypeError('invalid ciphertext size (must be 16 bytes)');\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\n        const a = [0, 0, 0, 0];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(ciphertext);\n        for (let i = 0; i < 4; i++) {\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\n        }\n        // apply round transforms\n        for (let r = 1; r < rounds; r++) {\n            for (let i = 0; i < 4; i++) {\n                a[i] = (T5[(t[i] >> 24) & 0xff] ^\n                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                    T7[(t[(i + 2) % 4] >> 8) & 0xff] ^\n                    T8[t[(i + 1) % 4] & 0xff] ^\n                    __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i]);\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for (let i = 0; i < 4; i++) {\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\n            result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n}\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();\n//# sourceMappingURL=aes.js.map","import { AES } from \"./aes.js\";\nexport class ModeOfOperation {\n    constructor(name, key, cls) {\n        if (cls && !(this instanceof cls)) {\n            throw new Error(`${name} must be instantiated with \"new\"`);\n        }\n        Object.defineProperties(this, {\n            aes: { enumerable: true, value: new AES(key) },\n            name: { enumerable: true, value: name }\n        });\n    }\n}\n//# sourceMappingURL=mode.js.map","// Cipher Block Chaining\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CBC extends ModeOfOperation {\n    constructor(key, iv) {\n        super(\"ECC\", key, CBC);\n        _CBC_iv.set(this, void 0);\n        _CBC_lastBlock.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n    }\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\")); }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext.length);\n        for (let i = 0; i < plaintext.length; i += 16) {\n            for (let j = 0; j < 16; j++) {\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n            }\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(ciphertext.length);\n        for (let i = 0; i < ciphertext.length; i += 16) {\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n            for (let j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n            }\n        }\n        return plaintext;\n    }\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();\n//# sourceMappingURL=mode-cbc.js.map","// Cipher Feedback\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CFB extends ModeOfOperation {\n    constructor(key, iv, segmentSize = 8) {\n        super(\"CFB\", key, CFB);\n        _CFB_instances.add(this);\n        _CFB_iv.set(this, void 0);\n        _CFB_shiftRegister.set(this, void 0);\n        // This library currently only handles byte-aligned segmentSize\n        if (!Number.isInteger(segmentSize) || (segmentSize % 8)) {\n            throw new TypeError(\"invalid segmentSize\");\n        }\n        Object.defineProperties(this, {\n            segmentSize: { enumerable: true, value: segmentSize }\n        });\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\n    }\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\")); }\n    encrypt(plaintext) {\n        if (8 * plaintext.length % this.segmentSize) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const ciphertext = new Uint8Array(plaintext);\n        for (let i = 0; i < ciphertext.length; i += segmentSize) {\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for (let j = 0; j < segmentSize; j++) {\n                ciphertext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (8 * ciphertext.length % this.segmentSize) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const plaintext = new Uint8Array(ciphertext);\n        for (let i = 0; i < plaintext.length; i += segmentSize) {\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for (let j = 0; j < segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return plaintext;\n    }\n}\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n    const segmentSize = this.segmentSize / 8;\n    // Shift the register\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n};\n//# sourceMappingURL=mode-cfb.js.map","// Counter Mode\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CTR extends ModeOfOperation {\n    constructor(key, initialValue) {\n        super(\"CTR\", key, CTR);\n        // Remaining bytes for the one-time pad\n        _CTR_remaining.set(this, void 0);\n        _CTR_remainingIndex.set(this, void 0);\n        // The current counter\n        _CTR_counter.set(this, void 0);\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n        if (initialValue == null) {\n            initialValue = 1;\n        }\n        if (typeof (initialValue) === \"number\") {\n            this.setCounterValue(initialValue);\n        }\n        else {\n            this.setCounterBytes(initialValue);\n        }\n    }\n    get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\")); }\n    setCounterValue(value) {\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n            throw new TypeError(\"invalid counter initial integer value\");\n        }\n        for (let index = 15; index >= 0; --index) {\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n            value = Math.floor(value / 256);\n        }\n    }\n    setCounterBytes(value) {\n        if (value.length !== 16) {\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\n        }\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n    }\n    increment() {\n        for (let i = 15; i >= 0; i--) {\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n            }\n            else {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n                break;\n            }\n        }\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        const crypttext = new Uint8Array(plaintext);\n        for (let i = 0; i < crypttext.length; i++) {\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n                this.increment();\n            }\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return crypttext;\n    }\n    decrypt(ciphertext) {\n        return this.encrypt(ciphertext);\n    }\n}\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();\n//# sourceMappingURL=mode-ctr.js.map","/**\n *  @_ignore\n */\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nexport function looseArrayify(hexString) {\n    if (typeof (hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return getBytesCopy(hexString);\n}\nexport function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexport function getPassword(password) {\n    if (typeof (password) === 'string') {\n        return toUtf8Bytes(password, \"NFKC\");\n    }\n    return getBytesCopy(password);\n}\nexport function spelunk(object, _path) {\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    assertArgument(match != null, \"invalid path\", \"path\", _path);\n    const path = match[1];\n    const type = match[3];\n    const reqd = (match[4] === \"!\");\n    let cur = object;\n    for (const comp of path.toLowerCase().split('.')) {\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) {\n                break;\n            }\n            cur = cur[parseInt(comp)];\n        }\n        else if (typeof (cur) === \"object\") {\n            let found = null;\n            for (const key in cur) {\n                if (key.toLowerCase() === comp) {\n                    found = cur[key];\n                    break;\n                }\n            }\n            cur = found;\n        }\n        else {\n            cur = null;\n        }\n        if (cur == null) {\n            break;\n        }\n    }\n    assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return parseInt(cur);\n            }\n            else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n        if (type === \"number\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return parseFloat(cur);\n            }\n        }\n        if (type === \"data\") {\n            if (typeof (cur) === \"string\") {\n                return looseArrayify(cur);\n            }\n        }\n        if (type === \"array\" && Array.isArray(cur)) {\n            return cur;\n        }\n        if (type === typeof (cur)) {\n            return cur;\n        }\n        assertArgument(false, `wrong type found for ${type} `, \"path\", path);\n    }\n    return cur;\n}\n/*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n/*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/\n//# sourceMappingURL=utils.js.map","// Output Feedback\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class OFB extends ModeOfOperation {\n    constructor(key, iv) {\n        super(\"OFB\", key, OFB);\n        _OFB_iv.set(this, void 0);\n        _OFB_lastPrecipher.set(this, void 0);\n        _OFB_lastPrecipherIndex.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, \"f\");\n        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, \"f\");\n    }\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, \"f\")); }\n    encrypt(plaintext) {\n        var _a, _b;\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext);\n        for (let i = 0; i < ciphertext.length; i++) {\n            if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, \"f\");\n            }\n            ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        return this.encrypt(ciphertext);\n    }\n}\n_OFB_iv = new WeakMap(), _OFB_lastPrecipher = new WeakMap(), _OFB_lastPrecipherIndex = new WeakMap();\n//# sourceMappingURL=mode-ofb.js.map","/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json) {\n    try {\n        const data = JSON.parse(json);\n        const version = ((data.version != null) ? parseInt(data.version) : 0);\n        if (version === 3) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\nfunction decrypt(data, key, ciphertext) {\n    const cipher = spelunk(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n        const aesCtr = new CTR(key, iv);\n        return hexlify(aesCtr.decrypt(ciphertext));\n    }\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\nfunction getAccount(data, _key) {\n    const key = getBytes(_key);\n    const ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n    assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) {\n            check = \"0x\" + check;\n        }\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n    const account = { address, privateKey };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = spelunk(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n        const mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        account.mnemonic = {\n            path: (spelunk(data, \"x-ethers.path:string\") || defaultPath),\n            locale: (spelunk(data, \"x-ethers.locale:string\") || \"en\"),\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n    return account;\n}\nfunction getDecryptKdfParams(data) {\n    const kdf = spelunk(data, \"crypto.kdf:string\");\n    if (kdf && typeof (kdf) === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n            const N = spelunk(data, \"crypto.kdfparams.n:int!\");\n            const r = spelunk(data, \"crypto.kdfparams.r:int!\");\n            const p = spelunk(data, \"crypto.kdfparams.p:int!\");\n            // Make sure N is a power of 2\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n            const prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n            const count = spelunk(data, \"crypto.kdfparams.c:int!\");\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\n        }\n    }\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json, _password) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\n    const { salt, N, r, p, dkLen } = params;\n    const key = scryptSync(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json, _password, progress) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\n    const { salt, N, r, p, dkLen } = params;\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\nfunction getEncryptKdfParams(options) {\n    // Check/generate the salt\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    assertArgument(typeof (N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    assertArgument(typeof (r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    assertArgument(typeof (p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\n    // Override initialization vector\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n    // Override the uuid\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n    // Encrypt the private key\n    const aesCtr = new CTR(derivedKey, iv);\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([macPrefix, ciphertext]));\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: hexlify(iv).substring(2),\n            },\n            ciphertext: hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: hexlify(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = (options.client != null) ? options.client : `ethers/${version}`;\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n        const mnemonicKey = key.slice(32, 64);\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = randomBytes(16);\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n        const now = new Date();\n        const timestamp = (now.getUTCFullYear() + \"-\" +\n            zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n            zpad(now.getUTCDate(), 2) + \"T\" +\n            zpad(now.getUTCHours(), 2) + \"-\" +\n            zpad(now.getUTCMinutes(), 2) + \"-\" +\n            zpad(now.getUTCSeconds(), 2) + \".0Z\");\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\n        data[\"x-ethers\"] = {\n            client, gethFilename, path, locale,\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n    return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n//# sourceMappingURL=json-keystore.js.map","/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport { encryptKeystoreJson, encryptKeystoreJsonSync, } from \"./json-keystore.js\";\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n    let result = \"\";\n    while (value) {\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while (result.length < length * 2) {\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n    const value = getBytes(_value);\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\n    const bytes = concat([value, check]);\n    return encodeBase58(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n        // Data = 0x00 || ser_256(k_par)\n        data.set(getBytes(privateKey), 1);\n    }\n    else {\n        // Data = ser_p(point(k_par))\n        data.set(getBytes(publicKey));\n    }\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n    }\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\n}\nfunction derivePath(node, path) {\n    const components = path.split(\"/\");\n    assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n    if (components[0] === \"m\") {\n        components.shift();\n    }\n    let result = node;\n    for (let i = 0; i < components.length; i++) {\n        const component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(HardenedBit + index);\n        }\n        else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(index);\n        }\n        else {\n            assertArgument(false, \"invalid path component\", `path[${i}]`, component);\n        }\n    }\n    return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nexport class HDNodeWallet extends BaseWallet {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    mnemonic;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\n        super(signingKey, provider);\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\n        defineProperties(this, { publicKey: signingKey.compressedPublicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n        defineProperties(this, {\n            parentFingerprint, fingerprint,\n            chainCode, path, index, depth\n        });\n        defineProperties(this, { mnemonic });\n    }\n    connect(provider) {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n    #account() {\n        const account = { address: this.address, privateKey: this.privateKey };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n        return account;\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        return encryptKeystoreJsonSync(this.#account(), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\n            zpad(this.index, 4), this.chainCode,\n            concat([\"0x00\", this.privateKey])\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n    neuter() {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n    static #fromSeed(_seed, mnemonic) {\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const seed = getBytes(_seed, \"seed\");\n        assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n    }\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    static fromExtendedKey(extendedKey) {\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\": {\n                const publicKey = hexlify(key);\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n            }\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */\n    static createRandom(password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */\n    static fromMnemonic(mnemonic, path) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n    static fromPhrase(phrase, password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n    static fromSeed(seed) {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nexport class HDNodeVoidWallet extends VoidSigner {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent node fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\n        super(address, provider);\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n        defineProperties(this, { publicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n        defineProperties(this, {\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\n        });\n    }\n    connect(provider) {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey,\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n        const address = computeAddress(Ki);\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n}\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n/**\n *  Returns the [[link-bip-32]] path for the acount at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${index}'/0/0`;\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${index}`;\n}\n//# sourceMappingURL=hdwallet.js.map","/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CBC, pkcs7Strip } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json) {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json, _password) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    // Ethereum Address\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new CBC(key, iv);\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    return { address, privateKey: id(seedHex) };\n}\n//# sourceMappingURL=json-crowdsale.js.map","export function pkcs7Pad(data) {\n    const padder = 16 - (data.length % 16);\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n    for (let i = data.length; i < result.length; i++) {\n        result[i] = padder;\n    }\n    return result;\n}\nexport function pkcs7Strip(data) {\n    if (data.length < 16) {\n        throw new TypeError('PKCS#7 invalid length');\n    }\n    const padder = data[data.length - 1];\n    if (padder > 16) {\n        throw new TypeError('PKCS#7 padding byte out of range');\n    }\n    const length = data.length - padder;\n    for (let i = 0; i < padder; i++) {\n        if (data[length + i] !== padder) {\n            throw new TypeError('PKCS#7 invalid padding byte');\n        }\n    }\n    return new Uint8Array(data.subarray(0, length));\n}\n//# sourceMappingURL=padding.js.map","import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n    /**\n     *  Create a new wallet for the %%privateKey%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key, provider) {\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = (typeof (key) === \"string\") ? new SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n    static #fromAccount(account) {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n        const wallet = new Wallet(account.privateKey);\n        assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n        return wallet;\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n        }\n        else if (isCrowdsaleJson(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        }\n        else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        }\n        else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the avavilable\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider) {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase, provider) {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n}\n//# sourceMappingURL=wallet.js.map","import { WordlistOwl } from \"./wordlist-owl.js\";\nimport { decodeOwlA } from \"./decode-owla.js\";\n/**\n *  An OWL-A format Wordlist extends the OWL format to add an\n *  overlay onto an OWL format Wordlist to support diacritic\n *  marks.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on latin-1 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwlA extends WordlistOwl {\n    #accent;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%\n     *  and %%accent%% data and validated against the %%checksum%%.\n     */\n    constructor(locale, data, accent, checksum) {\n        super(locale, data, checksum);\n        this.#accent = accent;\n    }\n    /**\n     *  The OWLA-encoded accent data.\n     */\n    get _accent() { return this.#accent; }\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords() {\n        return decodeOwlA(this._data, this._accent);\n    }\n}\n//# sourceMappingURL=wordlist-owla.js.map","import { assertArgument } from \"../utils/index.js\";\nimport { decodeBits } from \"./bit-reader.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\n/**\n *  @_ignore\n */\nexport function decodeOwlA(data, accents) {\n    let words = decodeOwl(data).join(\",\");\n    // Inject the accents\n    accents.split(/,/g).forEach((accent) => {\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n        assertArgument(match !== null, \"internal error parsing accents\", \"accents\", accents);\n        let posOffset = 0;\n        const positions = decodeBits(parseInt(match[3]), match[4]);\n        const charCode = parseInt(match[2]);\n        const regex = new RegExp(`([${match[1]}])`, \"g\");\n        words = words.replace(regex, (all, letter) => {\n            const rem = --positions[posOffset];\n            if (rem === 0) {\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n                posOffset++;\n            }\n            return letter;\n        });\n    });\n    return words.split(\",\");\n}\n//# sourceMappingURL=decode-owla.js.map","const Base64 = \")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\";\n/**\n *  @_ignore\n */\nexport function decodeBits(width, data) {\n    const maxValue = (1 << width) - 1;\n    const result = [];\n    let accum = 0, bits = 0, flood = 0;\n    for (let i = 0; i < data.length; i++) {\n        // Accumulate 6 bits of data\n        accum = ((accum << 6) | Base64.indexOf(data[i]));\n        bits += 6;\n        // While we have enough for a word...\n        while (bits >= width) {\n            // ...read the word\n            const value = (accum >> (bits - width));\n            accum &= (1 << (bits - width)) - 1;\n            bits -= width;\n            // A value of 0 indicates we exceeded maxValue, it\n            // floods over into the next value\n            if (value === 0) {\n                flood += maxValue;\n            }\n            else {\n                result.push(value + flood);\n                flood = 0;\n            }\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=bit-reader.js.map","import { LangEn } from \"./lang-en.js\";\nexport const wordlists = {\n    en: LangEn.wordlist(),\n};\n//# sourceMappingURL=wordlists-browser.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n    return keccak256(toUtf8Bytes(value));\n}\n//# sourceMappingURL=id.js.map","//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    gasPrice;\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxFeePerGas;\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n        defineProperties(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = hexlify(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getBigInt(req[key], `request.${key}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getNumber(req[key], `request.${key}`);\n    }\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    number;\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    hash;\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    timestamp;\n    /**\n     *  The block hash of the parent block.\n     */\n    parentHash;\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    nonce;\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    difficulty;\n    /**\n     *  The total gas limit for this block.\n     */\n    gasLimit;\n    /**\n     *  The total gas used in this block.\n     */\n    gasUsed;\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    miner;\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    extraData;\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    baseFeePerGas;\n    #transactions;\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block, provider) {\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof (tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n        defineProperties(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n    /**\n     *  Returns the list of transaction hashes.\n     */\n    get transactions() {\n        return this.#transactions.map((tx) => {\n            if (typeof (tx) === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions() {\n        const txs = this.#transactions.slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        assert(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n    get length() { return this.#transactions.length; }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof (indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n        }\n        else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof (v) === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n                else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof (tx) === \"string\") {\n            return (await this.provider.getTransaction(tx));\n        }\n        else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof (indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined() { return !!this.hash; }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    transactionHash;\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    blockHash;\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    blockNumber;\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    removed;\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    address;\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    data;\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    topics;\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    index;\n    /**\n     *  The index within the transaction of this log.\n     */\n    transactionIndex;\n    /**\n     *  @_ignore:\n     */\n    constructor(log, provider) {\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n}\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The address the transaction was send to.\n     */\n    to;\n    /**\n     *  The sender of the transaction.\n     */\n    from;\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    contractAddress;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    index;\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    blockHash;\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    blockNumber;\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    logsBloom;\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    gasUsed;\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    cumulativeGasUsed;\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    gasPrice;\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    type;\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    status;\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    root;\n    #logs;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        }\n        else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        defineProperties(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n    /**\n     *  The logs for this transaction.\n     */\n    get logs() { return this.#logs; }\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \n        status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n    /**\n     *  @_ignore:\n     */\n    get length() { return this.logs.length; }\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult() {\n        return (await this.provider.getTransactionResult(this.hash));\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other) {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    provider;\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockNumber;\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockHash;\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    index;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    type;\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    to;\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    from;\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    nonce;\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    gasLimit;\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    gasPrice;\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    maxFeePerGas;\n    /**\n     *  The data.\n     */\n    data;\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    value;\n    /**\n     *  The chain ID.\n     */\n    chainId;\n    /**\n     *  The signature.\n     */\n    signature;\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    accessList;\n    #startBlock;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.provider = provider;\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\n        this.#startBlock = -1;\n    }\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms, _timeout) {\n        const confirms = (_confirms == null) ? 1 : _confirms;\n        const timeout = (_timeout == null) ? 0 : _timeout;\n        let startBlock = this.#startBlock;\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true : false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) {\n                    nextScan = this.#startBlock;\n                }\n            }\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        }\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return receipt;\n        }\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return receipt;\n            }\n        }\n        else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n            const txListener = async (receipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    resolve(receipt);\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    }\n                    catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined() {\n        return (this.blockHash != null);\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent() {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other) {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock) {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\nfunction createOrphanedBlockFilter(block) {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return { orphan: \"drop-transaction\", tx };\n}\nfunction createRemovedLogFilter(log) {\n    return { orphan: \"drop-log\", log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        } };\n}\n//# sourceMappingURL=provider.js.map","import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            assertArgument(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    assertArgument(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n//# sourceMappingURL=accesslist.js.map","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof (value) === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && (value.length % 2) !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) {\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    }\n    else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\n//# sourceMappingURL=data.js.map","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\nfunction stringify(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return stringify(value.toJSON());\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return (value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\n        }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript envornoments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError(error, code) {\n    return (error && error.code === code);\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additioanl properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depneding on %%code%%, additional\n *  required properties. The error message will also include the %%meeage%%,\n *  ethers version, %%code%% and all aditional properties, serialized.\n */\nexport function makeError(message, code, info) {\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n            }\n            for (const key in info) {\n                const value = (info[key]);\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n                //                } catch (error: any) {\n                //                console.log(\"MMM\", error.message);\n                //                    details.push(key + \"=[could not serialize object]\");\n                //                }\n            }\n        }\n        details.push(`code=${code}`);\n        details.push(`version=${version}`);\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    defineProperties(error, { code });\n    if (info) {\n        Object.assign(error, info);\n    }\n    return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguemnts\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */\n            if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n            /* c8 ignore stop */\n        }\n        accum.push(form);\n    }\n    catch (error) { }\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n    /**\n     *  The event filter.\n     */\n    filter;\n    /**\n     *  The **EventEmitterable**.\n     */\n    emitter;\n    #listener;\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */\n    constructor(emitter, listener, filter) {\n        this.#listener = listener;\n        defineProperties(this, { emitter, filter });\n    }\n    /**\n     *  Unregister the triggered listener for future events.\n     */\n    async removeListener() {\n        if (this.#listener == null) {\n            return;\n        }\n        await this.emitter.off(this.filter, this.#listener);\n    }\n}\n//# sourceMappingURL=events.js.map","/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */\nimport { hexlify, isBytesLike } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */\nexport function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> (width - BN_1)) {\n        const mask = (BN_1 << width) - BN_1;\n        return -(((~value) & mask) + BN_1);\n    }\n    return value;\n}\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */\nexport function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = (BN_1 << (width - BN_1));\n    if (value < BN_0) {\n        value = -value;\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return ((~value) & mask) + BN_1;\n    }\n    else {\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n    }\n    return value;\n}\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */\nexport function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & ((BN_1 << bits) - BN_1);\n}\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getBigInt(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\": return value;\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            }\n            catch (e) {\n                assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */\nexport function getUint(value, name) {\n    const result = getBigInt(value, name);\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\", operation: \"getUint\", value\n    });\n    return result;\n}\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */\nexport function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value) {\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getNumber(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\":\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            }\n            catch (e) {\n                assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n}\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */\nexport function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */\nexport function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    }\n    else {\n        const width = getNumber(_width, \"width\");\n        assert(width * 2 >= result.length, `value exceeds width (${width} bits)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while (result.length < (width * 2)) {\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */\nexport function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */\nexport function toQuantity(value) {\n    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) {\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n}\n//# sourceMappingURL=maths.js.map","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\nfunction checkType(value, type, name) {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof (value) === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\n    return results.reduce((accum, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties(target, values, types) {\n    for (let key in values) {\n        let value = values[key];\n        const type = (types ? types[key] : null);\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n//# sourceMappingURL=properties.js.map","/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            }\n            else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","Uint8Array","TypeError","length","includes","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","U32_MASK64","BigInt","_32n","fromBig","le","h","l","split","lst","Ah","Uint32Array","Al","i","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","self","crypto","u32","arr","buffer","byteOffset","Math","floor","byteLength","createView","DataView","rotr","word","shift","Array","from","v","toString","padStart","nextTick","async","asyncLoop","iters","tick","cb","ts","Date","now","diff","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","isPlainObject","obj","Object","prototype","call","constructor","checkOpts","defaults","opts","undefined","assign","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","wrapConstructorWithOpts","hashCons","msg","version","AddressCoder","localName","super","defaultValue","writer","_value","value","dereference","error","_throwError","writeValue","decode","reader","readValue","AnonymousCoder","coder","name","type","dynamic","pack","coders","values","arrayValues","isArray","unique","map","argument","info","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","keys","baseReader","subReader","offset","readIndex","offsetReader","baseType","fromItems","ArrayCoder","defaultChild","result","count","dataLength","BooleanCoder","DynamicBytesCoder","writeBytes","readBytes","BytesCoder","FixedBytesCoder","size","String","substring","Empty","NullCoder","BN_0","BN_1","BN_MAX_UINT256","NumberCoder","signed","maxUintValue","bounds","StringCoder","TupleCoder","types","join","freeze","slice","uniqueNames","reduce","accum","PanicReasons","Map","set","paramTypeBytes","RegExp","paramTypeNumber","defaultCoder","AbiCoder","param","arrayChildren","arrayLength","isTuple","components","c","match","parseInt","getDefaultValue","loose","defaultAbiCoder","getBuiltinCallException","action","tx","abiCoder","reason","revert","signature","args","JSON","stringify","code","get","transaction","to","invocation","WordSize","Padding","passProperties","_guard","throwError","wrapped","Result","guard","items","names","wrap","item","nameCounts","Proxy","target","prop","receiver","RangeError","indexOf","Reflect","Function","apply","getValue","toArray","toObject","operation","start","end","filter","callback","thisArg","checkResultErrors","errors","checkErrors","path","object","key","childPath","Coder","Writer","paddingOffset","Reader","allowLoose","consumed","alignedLength","ceil","setify","Set","k","_kwVisib","KwVisib","_kwTypes","KwTypes","_kwModifiers","KwModifiers","Keywords","SimpleTokens","regexWhitespacePrefix","regexNumberPrefix","regexIdPrefix","regexId","regexType","TokenString","tokens","reset","t","linkBack","linkNext","popKeyword","allowed","top","peek","has","text","pop","popType","popParen","popParams","link","peekKeyword","peekType","token","lex","brackets","commas","cur","depth","suffix","allowSingle","included","consumeName","keyword","consumeKeywords","keywords","consumeMutability","modifiers","consumeParams","allowIndexed","ParamType","consumeGas","consumeEoi","regexArrayType","verifyBasicType","internal","Symbol","for","ParamTypeInternal","ErrorFragmentInternal","EventFragmentInternal","ConstructorFragmentInternal","FallbackFragmentInternal","FunctionFragmentInternal","StructFragmentInternal","indexed","defineProperty","format","parse","comp","isIndexable","walk","process","_this","promises","setValue","childType","then","walkAsync","Promise","all","isParamType","comps","bracket","arrayMatch","startsWith","Fragment","inputs","e","ConstructorFragment","ErrorFragment","EventFragment","FallbackFragment","FunctionFragment","StructFragment","isConstructor","isFragment","isError","isEvent","isFunction","isStruct","NamedFragment","joinParams","params","p","selector","id","input","anonymous","topicHash","getTopicHash","payable","gas","stateMutability","errorObj","topIsValid","mutability","outputs","constant","o","getSelector","LogDescription","fragment","topic","TransactionDescription","ErrorDescription","Indexed","_isIndexed","isIndexed","BuiltinErrors","Interface","fragments","deploy","fallback","receive","abi","frags","a","console","log","getAbiCoder","bucket","minimal","f","formatJson","j","forceUnique","toLowerCase","matching","lastValue","valueLength","allowOptions","isTyped","splice","lastArg","matchStr","m","getFunctionName","hasFunction","getFunction","forEachFunction","sort","localeCompare","eventTopic","getEventName","hasEvent","getEvent","forEachEvent","getError","forEachError","_decodeParams","_encodeParams","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","encodeFunctionData","decodeFunctionResult","method","makeError","_data","ef","parsed","parseTransaction","encodeFunctionResult","encodeFilterTopics","expectedCount","topics","encodeTopic","encodeEventLog","dataTypes","dataValues","decodeEventLog","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","parseCallResult","parseLog","parseError","hexData","_gaurd","width","Typed","_typedSymbol","gaurd","options","minValue","maxValue","isBigInt","isData","isString","tupleName","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","uint","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","int","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","address","string","array","tuple","overrides","BN_36","getChecksumAddress","chars","expanded","charCodeAt","hashed","toUpperCase","ibanLookup","fromCharCode","safeDigits","ibanChecksum","block","checksum","Base36","getAddress","fromBase36","getIcapAddress","base36","isAddressable","isAddress","checkAddress","promise","resolveAddress","resolver","resolveName","canCall","canEstimate","canResolve","canSend","PreparedTopicFilter","contract","runner","getRunner","resolvedArgs","interface","getTopicFilter","feature","provider","getProvider","copyOverrides","arg","resolveArgs","_runner","buildWrappedFallback","populateTransaction","iface","noValue","noData","send","sendTransaction","_contract","estimateGas","staticCall","internalValues","WeakMap","getInternal","getSubInfo","event","topicHashify","tag","hasSub","subs","getSub","addr","sub","listener","foundFragment","_foundFragment","emit","starting","listeners","on","stop","started","off","lastEmit","resolve","payloadFunc","resultPromise","once","passArgs","delete","_emit","BaseContract","filters","_deployTx","addrPromise","deployTx","_prop","connect","attach","getDeployedCode","getCode","waitForDeployment","deploymentTransaction","wait","reject","checkCode","getFragment","staticCallResult","_key","configurable","enumerable","buildWrappedMethod","buildWrappedEvent","queryTransaction","queryFilter","fromBlock","toBlock","getLogs","listenerCount","total","concat","removeAllListeners","addListener","removeListener","buildClass","Contract","_ContractBase","EventLog","eventName","eventSignature","ContractTransactionReceipt","logs","ContractTransactionResponse","confirms","receipt","ContractUnknownEventPayload","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","enableXOF","rounds","pos","posOut","state","state32","keccak","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","fill","keccakP","len","take","finish","writeInto","bufferOut","subarray","xofInto","xof","digestInto","destroy","gen","keccak_256","genShake","dkLen","locked","_keccak256","__keccak256","keccak256","_","lock","register","encodeBytes32String","decodeBytes32String","_bytes","arrayifyInteger","unshift","_encode","payload","child","nibbles","encodeRlp","getCreateAddress","nonceHex","nonce","getCreate2Address","_from","_salt","_initCodeHash","salt","initCodeHash","ZeroAddress","N","WeiPerEther","MaxUint256","MinInt256","MaxInt256","ZeroHash","EtherSymbol","MessagePrefix","ContractFactory","bytecode","getDeployTransaction","sentTx","fromSolidity","evm","HMAC","iHash","pad","oHash","buf","getPrototypeOf","hmac","pbkdf2","password","DK","PRF","PRFSalt","_password","_opts","asyncTick","pbkdf2Init","prfW","view","u","ti","Ti","setInt32","ui","pbkdf2Output","SHA2","padOffset","isLE","dataView","roundClean","setBigUint64","_u32_max","wh","wl","setUint32","oview","res","Maj","SHA256_K","IV","SHA256_W","SHA256","A","C","D","E","F","G","H","getUint32","W15","W2","s0","s1","T1","T2","sha256","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512","anyGlobal","window","global","getGlobal","msCrypto","createHash","algo","_computeHmac","algorithm","_algo","createHmac","__computeHmac","computeHmac","Rho","Id","Pi","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","group","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","_ripemd160","__ripemd160","_pbkdf2","iterations","keylen","pbkdf2Sync","__pbkdf2","_randomBytes","isInteger","getRandomValues","__randomBytes","XorAndSalsa","prev","pi","ii","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","r","head","tail","scryptInit","maxmem","onProgress","blockSize","blockSize32","memUsed","B32","V","blockMixCb","totalBlockMix","callbackPer","max","blockMixCnt","scryptOutput","lockedSync","lockedAsync","_scryptAsync","passwd","_scryptSync","__scryptAsync","__scryptSync","_passwd","progress","scryptSync","_sha256","_sha512","__sha256","__sha512","locked256","locked512","BN_2","BN_27","BN_28","BN_35","toUint256","Signature","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","toJSON","_type","bv","getChainIdV","chainId","getNormalizedV","sig","assertError","check","_r","_v","_3n","_8n","CURVE","P","Gx","Gy","beta","divNearest","endo","splitScalar","a1","b1","a2","b2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","fieldLen","groupLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","other","JacobianPoint","fromAffine","Point","equals","ZERO","toAffineBatch","points","toInv","nums","scratch","inverted","invert","acc","num","reduceRight","invertBatch","toAffine","normalizeZ","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","HH","HHH","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1p","k2p","precomputeWindow","W","windows","base","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","point","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","condition","neg","_setWindowSize","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","assertValidity","fromUncompressedHex","fromHex","hex","ensureBytes","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","recovery","fromDER","fromCompact","normalizeSignature","truncateHash","radj","rinv","u1","u2","prefix","numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","bytesToHex","hexToNumber","sBytes","rBytesLeft","parseDERSignature","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","hexes","uint8a","POW_2_256","numTo32b","hexByte","byte","isNaN","power","modulo","q","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","hashLen","qByteLen","counter","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","lowS","kinv","isProbPub","bits2int","bits2octets","z1","z2","int2octets","node","web","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","randomBytes","bytesLength","randomPrivateKey","precompute","cached","messages","subtle","ckey","importKey","sign","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","val","SigningKey","publicKey","computePublicKey","compressedPublicKey","sigDer","recid","privKey","extraEntropy","seedArgs","initSigArgs","drbg","canonical","recSig","der","recovered","finalizeSig","computeSharedSecret","pubKey","privateA","publicB","compressed","pub","recoverPublicKey","addPoints","p0","p1","pub0","pub1","read_compressed_payload","read_payload","u16","symbol_count","skip","pos_payload","read_width","read_buffer","read_bit","FULL","MASK","symbols","range","mid","decode_arithmetic","lookup","ret","carry","unsafe_atob","read_deltas","next","read_sorted","read_sorted_arrays","read_array_while","read_mapped","w","read_linear_table","read_replacement_table","flat","read_transposed","dx","dy","vN","flatMap","ys","j_dy","r$1","FENCED","NSM_MAX","quote_cp","cp","hex_cp","str_from_cps","cps","fromCodePoint","unpack_cc","packed","unpack_cp","SHIFTED_RANK","EXCLUSIONS","DECOMP","RECOMP","reverse","S0","L0","V0","T0","T_COUNT","N_COUNT","L1","V1","is_hangul","compose_pair","recomp","decomposed","check_order","cc","s_index","v_index","t_index","mapped","prev_cc","nfd","nfc","stack","prev_cp","composed","composed_from_decomposed","FE0F","STOP_CH","UNIQUE_PH","HYPHEN","read_set","MAPPED","IGNORED","CM","NSM","ESCAPE","CHUNKS","read_chunked","UNRESTRICTED","GROUPS","M","WHOLE_VALID","WHOLE_MAP","recs","gs","g","rec","find","some","union","complement","multi","VALID","EMOJI_SORTED","EMOJI_ROOT","read_emoji_trie","temp","S","Emoji","is_emoji","safe_str_from_cps","quoter","should_escape","quoted_cp","bidi_qq","check_leading_underscore","lastIndexOf","ens_split","preserve_emoji","label","norm","codePointAt","explode_cp","nf","emoji","consume_emoji_reversed","error_disallowed","token_count","check_label_extension","error_placement","last","check_fenced","groups","error_group_member","determine_group","check_group","maker","shared","whole","check_whole","err","quoted","gg","where","eaten","saved","conform_emoji_copy","copy","Zeros","checkComponent","ensNameSplit","ensNormalize","ens_normalize","isValidName","namehash","dnsEncode","computeAddress","pubkey","recoverAddress","hashMessage","verifyMessage","regexBytes","regexNumber","regexArray","_pack","solidityPacked","tight","solidityPackedKeccak256","solidityPackedSha256","padding","BN__1","hexTrue","hexFalse","domainFieldTypes","verifyingContract","domainFieldNames","checkString","domainChecks","getBaseEncoder","boundsUpper","boundsLower","hexPadRight","encodeType","fields","TypedDataEncoder","primaryType","links","parents","subtypes","field","primaryTypes","checkCircular","found","subtype","st","getEncoder","encoder","subEncoder","encodedType","encodeData","hashStruct","_visit","visit","getPrimaryType","hashDomain","domain","domainFields","EIP712Domain","resolveNames","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","verifyTypedData","decodeBase64","textData","atob","encodeBase64","btoa","getUrlFunc","req","_signal","protocol","url","signal","credentials","allowInsecureAuthentication","controller","AbortController","abort","init","headers","Headers","body","resp","fetch","respBody","arrayBuffer","statusCode","status","statusMessage","statusText","reData","reIpfs","dataGatewayFunc","FetchResponse","replace","FetchRequest","getIpfsGatewayFunc","baseUrl","Gateways","fetchSignals","FetchCancelSignal","request","setTimeout","cancelled","checkSignal","hasBody","allowGzip","getHeader","setHeader","clearHeaders","iterator","done","setCredentials","username","timeout","preflightFunc","preflight","processFunc","retryFunc","retry","slotInterval","maxAttempts","setThrottleParams","attempt","expires","delay","_request","_response","makeServerError","getTime","scheme","response","throttle","assertOk","location","redirect","retryAfter","trunc","random","pow","stall","cancel","current","lockConfig","getGateway","registerGateway","registerGetUrl","getUrl","createDataGateway","createIpfsGatewayFunc","bodyText","bodyJson","throwThrottleError","ok","shown","showThrottleMessage","service","NetworkPlugin","GasCostPlugin","effectiveBlock","txBase","txCreate","txDataZero","txDataNonzero","txAccessListStorageKey","txAccessListAddress","costs","props","nullish","EnsPlugin","targetNetwork","FeeDataNetworkPlugin","feeDataFunc","getFeeData","Networks","Network","matches","plugins","attachPlugin","plugin","getPlugin","getPlugins","basename","computeIntrinsicGas","accessList","storageKeys","network","registerEth","ensNetwork","priorityFee","altNames","injected","etherscan","injectCommonNetworks","networkFunc","custom","ensAddress","nameOrChainId","existing","hexlifyByte","unarrayifyInteger","_decodeChildren","childOffset","decoded","_decode","checkOffset","lengthLength","decodeRlp","BN_MAX_UINT","handleAddress","handleAccessList","handleNumber","handleUint","formatNumber","formatAccessList","_serializeLegacy","gasPrice","gasLimit","legacy","_parseEipSignature","_serializeEip1559","maxPriorityFeePerGas","maxFeePerGas","_serializeEip2930","Transaction","typeName","unsignedHash","unsignedSerialized","fromPublicKey","isSigned","inferType","inferTypes","hasGasPrice","hasFee","hasAccessList","isLegacy","isBerlin","isLondon","_parseLegacy","_parseEip2930","_parseEip1559","Alphabet","Lookup","getAlpha","letter","BN_58","encodeBase58","decodeBase58","getIpfsLink","MulticoinProviderPlugin","proivder","supportsCoinType","coinType","encodeAddress","decodeAddress","matcherIpfs","matchers","EnsResolver","supportsWildcard","supportsInterface","funcName","enableCcipRead","ethCoinType","coinPlugin","getText","getContentHash","ipfs","swarm","getAvatar","_getAvatar","linkage","avatar","owner","tokenId","tokenOwner","ownerOf","balance","balanceOf","metadataUrl","metadata","imageUrl","image","getEnsAddress","getNetwork","ensPlugin","ensAddr","fromName","currentName","allowNull","nullValue","arrayOf","srcKey","altKey","nv","formatData","formatHash","_formatLog","blockHash","blockNumber","removed","transactionHash","transactionIndex","_formatBlock","parentHash","timestamp","difficulty","gasUsed","miner","extraData","baseFeePerGas","_formatReceiptLog","_formatTransactionReceipt","contractAddress","root","logsBloom","cumulativeGasUsed","effectiveGasPrice","formatTransactionResponse","creates","PollingBlockSubscriber","pollingInterval","getBlockNumber","_setTimeout","bind","_clearTimeout","pause","dropWhilePaused","resume","OnBlockSubscriber","_poll","PollingOrphanSubscriber","PollingTransactionSubscriber","PollingEventSubscriber","isPromise","getTag","UnmanagedSubscriber","concisify","getSubscription","_event","orphan","addresses","addAddress","defaultOptions","cacheTimeout","AbstractProvider","_network","disableCcipRead","_perform","perform","ccipReadFetch","calldata","urls","sender","errorMessages","href","errorMessage","_wrapBlock","transactions","formatBlock","_wrapLog","formatLog","_wrapTransactionReceipt","formatTransactionReceipt","_wrapTransactionResponse","_detectNetwork","_getAddress","_getBlockTag","blockTag","_getFilter","_address","_getTransactionRequest","detectNetwork","networkPromise","expected","actual","_tx","txSender","ccipArgs","errorArgs","zeros","urlsOffset","urlsLength","urlsData","_parseString","_parseBytes","parseOffchainLookup","ccipResult","encodeBytes","_blockTag","getBalance","getTransactionCount","getStorage","_position","position","broadcastTransaction","signedTx","signedTransaction","replaceableTransaction","includeTransactions","prefetchTxs","getTransactionResult","_filter","_getProvider","getResolver","lookupAddress","ensContract","resolverContract","waitForTransaction","_confirms","timer","clearTimeout","waitForBlock","timerId","_func","paused","time","_forEachSubscriber","subscriber","_getSubscriber","_recoverSubscriber","oldSub","newSub","emitArgs","subscription","addressableMap","nameMap","numPad","padded","bytesPad","empty","datas","byteCount","checkProvider","signer","populate","AbstractSigner","getNonce","populateCall","hasEip1559","feeData","txObj","signTransaction","VoidSigner","signMessage","signTypedData","FilterIdSubscriber","_subscribe","_emitResults","_recover","filterId","filterIdPromise","FilterIdEventSubscriber","results","FilterIdPendingSubscriber","Primitive","deepCopy","duration","getLowerCase","isPollable","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","JsonRpcSigner","sendUncheckedTransaction","_to","hexTx","getRpcTransaction","timeouts","checkTx","_message","populated","unlock","_legacySignMessage","JsonRpcApiProvider","stallTime","_getOption","payloads","batch","_send","getRpcError","superOptions","_resolve","getRpcRequest","ready","jsonrpc","_start","_waitUntilReady","dstKey","_error","spelunkData","_spelunkMessage","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","unsupported","details","getSigner","accountsPromise","accounts","account","listAccounts","JsonRpcApiPollingProvider","JsonRpcProvider","_getConnection","defaultApiKey","AnkrProvider","apiKey","getRequest","getHost","isCommunityResource","AlchemyProvider","trace","CloudflareProvider","EtherscanPluginId","EtherscanPlugin","skipKeys","nextId","EtherscanProvider","_apiKey","getBaseUrl","module","query","getPostUrl","getPostData","apikey","post","_getTransactionPostData","maxFeePerGs","_checkError","catch","boolean","txhash","postData","getEtherPrice","parseFloat","ethusd","getContract","_WebSocket","WebSocket","SocketSubscriber","_register","_handleMessage","emitPromise","SocketBlockSubscriber","SocketPendingSubscriber","SocketEventSubscriber","logFilter","SocketProvider","pending","_write","_processMessage","reasonCode","WebSocketProvider","websocket","onopen","onmessage","close","defaultProjectId","InfuraWebSocketProvider","projectId","projectSecret","InfuraProvider","getWebSocketProvider","defaultToken","QuickNodeProvider","defaultConfig","stallTimeout","priority","weight","defaultState","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_updateNumber","_totalTime","_lastFatalError","_lastFatalErrorTimestamp","_normalize","normalizeResult","checkQuorum","quorum","tally","best","getMedian","resultWeight","errorMap","bestError","getAnyResult","FallbackProvider","eventQuorum","eventWorkers","providers","providerConfigs","_translatePerform","running","configs","config","allConfigs","shuffle","didBump","staller","dt","initialSync","waitForSync","mode","bestResult","bestWeight","getFuzzyMode","interesting","newRunners","race","getDefaultProvider","alchemy","ankr","cloudflare","infura","quicknode","NonceManager","increment","noncePromise","BrowserProvider","ethereum","hasSigner","defaultApplicationId","PocketProvider","applicationId","applicationSecret","IpcSocketProvider","BN_N1","BN_5","getTens","decimals","checkValue","safeOp","limit","fault","getFormat","FixedNumber","negative","addUnsafe","subUnsafe","mulUnsafe","mul","mulSignal","divUnsafe","div","divSignal","cmp","eq","lt","lte","gt","gte","ceiling","bump","tens","isZero","isNegative","toUnsafeFloat","toFormat","fromString","fromValue","_decimals","_format","decimal","fromBytes","formatUnits","unit","parseUnits","formatEther","wei","parseEther","ether","uuidV4","subsChrs","Word","unfold","words","sep","initial","decodeOwl","clumps","leftover","semi","Wordlist","locale","phrase","WordlistOwl","_decodeWords","getWord","getWordIndex","wordlist","LangEn","getUpperMask","bits","mnemonicToEntropy","mnemonic","entropy","normalize","bit","entropyBits","checksumMask","entropyToMnemonic","indices","remainingBits","checksumBits","Mnemonic","computeSeed","fromPhrase","fromEntropy","_entropy","entropyToPhrase","phraseToEntropy","isValidMnemonic","BaseWallet","signingKey","btx","signMessageSync","_AES_key","_AES_Kd","_AES_Ke","__classPrivateFieldGet","kind","__classPrivateFieldSet","numberOfRounds","rcon","Si","T3","T4","T5","T6","T7","T8","U3","U4","convertToInt32","AES","roundKeyCount","KC","tk","tt","rconpointer","encrypt","plaintext","decrypt","ciphertext","cls","aes","_CBC_iv","_CBC_lastBlock","CBC","iv","WeakSet","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","CTR","initialValue","setCounterValue","setCounterBytes","MAX_SAFE_INTEGER","_a","_b","crypttext","looseArrayify","hexString","zpad","getPassword","spelunk","_path","reqd","defaultPath","isKeystoreJson","json","getAccount","computedMAC","aesCtr","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","getDecryptKdfParams","kdf","prf","decryptKeystoreJsonSync","decryptKeystoreJson","getEncryptKdfParams","scrypt","_encryptKeystore","uuidRandom","uuid","derivedKey","macPrefix","mac","Crypto","cipher","cipherparams","kdfparams","dklen","client","gethFilename","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","mnemonicCounter","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","progressCallback","MasterSecret","HardenedBit","encodeBase58Check","ser_I","chainCode","I","IL","IR","derivePath","component","deriveChild","HDNodeWallet","fingerprint","parentFingerprint","encryptSync","extendedKey","hasPath","neuter","HDNodeVoidWallet","_index","ki","_seed","fromExtendedKey","createRandom","fromMnemonic","fromSeed","Ki","getAccountPath","getIndexedAccountPath","isCrowdsaleJson","encseed","decryptCrowdsaleJson","encryptedSeed","aesCbc","padder","pkcs7Strip","seedHex","Wallet","wallet","fromEncryptedJson","fromEncryptedJsonSync","WordlistOwlA","accent","_accent","accents","posOffset","positions","flood","decodeBits","charCode","regex","decodeOwlA","wordlists","en","toJson","FeeData","copyRequest","bigIntKeys","numberKeys","customData","Block","TransactionResponse","prefetchedTransactions","txs","date","indexOrHash","getPrefetchedTransaction","isMined","orphanedEvent","Log","removedEvent","TransactionReceipt","fee","getResult","confirmations","createRemovedTransactionFilter","reorderedEvent","createReorderedTransactionFilter","_timeout","startBlock","nextScan","stopScanning","checkReplacement","mined","replacement","waiter","cancellers","txListener","replaceListener","accessSetify","storageKey","accessListify","_getBytes","getBytes","getBytesCopy","isHexString","isBytesLike","HexCharacters","hexlify","dataSlice","stripZerosLeft","zeroPad","zeroPadValue","zeroPadBytes","HEX","isCallException","assert","assertArgument","assertArgumentCount","_normalizeForms","form","assertNormalize","assertPrivate","givenGuard","className","EventPayload","emitter","fromTwos","_width","getUint","getNumber","toTwos","getBigInt","_bits","Nibbles","toBigInt","toNumber","toBeHex","toBeArray","toQuantity","checkType","trim","resolveProperties","writable","ignoreFunc","badCodepoint","Utf8ErrorFuncs","ignore","getUtf8CodePoints","onError","extraLength","overlongMask","nextChar","toUtf8Bytes","pair","toUtf8String","codePoint","toUtf8CodePoints"],"sourceRoot":""}